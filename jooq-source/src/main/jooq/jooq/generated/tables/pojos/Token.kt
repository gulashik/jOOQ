/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull

import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IToken


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Token(
    override var tokenId: Long? = null,
    @get:NotNull
    override var saleId: Long,
    @get:NotNull
    override var amount: Double,
    override var updatedOn: LocalDateTime? = null
): IToken {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Token = other as Token
        if (this.tokenId == null) {
            if (o.tokenId != null)
                return false
        }
        else if (this.tokenId != o.tokenId)
            return false
        if (this.saleId != o.saleId)
            return false
        if (this.amount != o.amount)
            return false
        if (this.updatedOn == null) {
            if (o.updatedOn != null)
                return false
        }
        else if (this.updatedOn != o.updatedOn)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.tokenId == null) 0 else this.tokenId.hashCode())
        result = prime * result + this.saleId.hashCode()
        result = prime * result + this.amount.hashCode()
        result = prime * result + (if (this.updatedOn == null) 0 else this.updatedOn.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Token (")

        sb.append(tokenId)
        sb.append(", ").append(saleId)
        sb.append(", ").append(amount)
        sb.append(", ").append(updatedOn)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IToken) {
        this.tokenId = from.tokenId
        this.saleId = from.saleId
        this.amount = from.amount
        this.updatedOn = from.updatedOn
    }
}
