/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IEmployeeStatus


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class EmployeeStatus(
    override var id: Int? = null,
    @get:NotNull
    override var employeeNumber: Long,
    @get:NotNull
    @get:Size(max = 50)
    override var status: String,
    @get:NotNull
    override var acquiredDate: LocalDate
): IEmployeeStatus {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: EmployeeStatus = other as EmployeeStatus
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.employeeNumber != o.employeeNumber)
            return false
        if (this.status != o.status)
            return false
        if (this.acquiredDate != o.acquiredDate)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + this.employeeNumber.hashCode()
        result = prime * result + this.status.hashCode()
        result = prime * result + this.acquiredDate.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("EmployeeStatus (")

        sb.append(id)
        sb.append(", ").append(employeeNumber)
        sb.append(", ").append(status)
        sb.append(", ").append(acquiredDate)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IEmployeeStatus) {
        this.id = from.id
        this.employeeNumber = from.employeeNumber
        this.status = from.status
        this.acquiredDate = from.acquiredDate
    }
}
