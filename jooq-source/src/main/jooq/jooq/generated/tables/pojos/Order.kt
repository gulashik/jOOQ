/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal
import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IOrder


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Order(
    override var orderId: Long? = null,
    @get:NotNull
    override var orderDate: LocalDate,
    @get:NotNull
    override var requiredDate: LocalDate,
    override var shippedDate: LocalDate? = null,
    @get:NotNull
    @get:Size(max = 15)
    override var status: String,
    override var comments: String? = null,
    @get:NotNull
    override var customerNumber: Long,
    @get:NotNull
    override var amount: BigDecimal
): IOrder {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Order = other as Order
        if (this.orderId == null) {
            if (o.orderId != null)
                return false
        }
        else if (this.orderId != o.orderId)
            return false
        if (this.orderDate != o.orderDate)
            return false
        if (this.requiredDate != o.requiredDate)
            return false
        if (this.shippedDate == null) {
            if (o.shippedDate != null)
                return false
        }
        else if (this.shippedDate != o.shippedDate)
            return false
        if (this.status != o.status)
            return false
        if (this.comments == null) {
            if (o.comments != null)
                return false
        }
        else if (this.comments != o.comments)
            return false
        if (this.customerNumber != o.customerNumber)
            return false
        if (this.amount != o.amount)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.orderId == null) 0 else this.orderId.hashCode())
        result = prime * result + this.orderDate.hashCode()
        result = prime * result + this.requiredDate.hashCode()
        result = prime * result + (if (this.shippedDate == null) 0 else this.shippedDate.hashCode())
        result = prime * result + this.status.hashCode()
        result = prime * result + (if (this.comments == null) 0 else this.comments.hashCode())
        result = prime * result + this.customerNumber.hashCode()
        result = prime * result + this.amount.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Order (")

        sb.append(orderId)
        sb.append(", ").append(orderDate)
        sb.append(", ").append(requiredDate)
        sb.append(", ").append(shippedDate)
        sb.append(", ").append(status)
        sb.append(", ").append(comments)
        sb.append(", ").append(customerNumber)
        sb.append(", ").append(amount)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IOrder) {
        this.orderId = from.orderId
        this.orderDate = from.orderDate
        this.requiredDate = from.requiredDate
        this.shippedDate = from.shippedDate
        this.status = from.status
        this.comments = from.comments
        this.customerNumber = from.customerNumber
        this.amount = from.amount
    }
}
