/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IAuthor


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Author(
    @get:NotNull
    override var id: Int,
    @get:Size(max = 50)
    override var firstName: String? = null,
    @get:NotNull
    @get:Size(max = 50)
    override var lastName: String,
    override var dateOfBirth: LocalDate? = null,
    override var yearOfBirth: Int? = null,
    override var distinguished: Byte? = null
): IAuthor {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Author = other as Author
        if (this.id != o.id)
            return false
        if (this.firstName == null) {
            if (o.firstName != null)
                return false
        }
        else if (this.firstName != o.firstName)
            return false
        if (this.lastName != o.lastName)
            return false
        if (this.dateOfBirth == null) {
            if (o.dateOfBirth != null)
                return false
        }
        else if (this.dateOfBirth != o.dateOfBirth)
            return false
        if (this.yearOfBirth == null) {
            if (o.yearOfBirth != null)
                return false
        }
        else if (this.yearOfBirth != o.yearOfBirth)
            return false
        if (this.distinguished == null) {
            if (o.distinguished != null)
                return false
        }
        else if (this.distinguished != o.distinguished)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.id.hashCode()
        result = prime * result + (if (this.firstName == null) 0 else this.firstName.hashCode())
        result = prime * result + this.lastName.hashCode()
        result = prime * result + (if (this.dateOfBirth == null) 0 else this.dateOfBirth.hashCode())
        result = prime * result + (if (this.yearOfBirth == null) 0 else this.yearOfBirth.hashCode())
        result = prime * result + (if (this.distinguished == null) 0 else this.distinguished.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Author (")

        sb.append(id)
        sb.append(", ").append(firstName)
        sb.append(", ").append(lastName)
        sb.append(", ").append(dateOfBirth)
        sb.append(", ").append(yearOfBirth)
        sb.append(", ").append(distinguished)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IAuthor) {
        this.id = from.id
        this.firstName = from.firstName
        this.lastName = from.lastName
        this.dateOfBirth = from.dateOfBirth
        this.yearOfBirth = from.yearOfBirth
        this.distinguished = from.distinguished
    }
}
