/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IProductMaster


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class ProductMaster(
    @get:Size(max = 50)
    override var productLine: String? = null,
    @get:Size(max = 70)
    override var productName: String? = null,
    @get:Size(max = 10)
    override var productScale: String? = null
): IProductMaster {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: ProductMaster = other as ProductMaster
        if (this.productLine == null) {
            if (o.productLine != null)
                return false
        }
        else if (this.productLine != o.productLine)
            return false
        if (this.productName == null) {
            if (o.productName != null)
                return false
        }
        else if (this.productName != o.productName)
            return false
        if (this.productScale == null) {
            if (o.productScale != null)
                return false
        }
        else if (this.productScale != o.productScale)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.productLine == null) 0 else this.productLine.hashCode())
        result = prime * result + (if (this.productName == null) 0 else this.productName.hashCode())
        result = prime * result + (if (this.productScale == null) 0 else this.productScale.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("ProductMaster (")

        sb.append(productLine)
        sb.append(", ").append(productName)
        sb.append(", ").append(productScale)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IProductMaster) {
        this.productLine = from.productLine
        this.productName = from.productName
        this.productScale = from.productScale
    }
}
