/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.util.Arrays

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IEmployee


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Employee(
    @get:NotNull
    override var employeeNumber: Long,
    @get:NotNull
    @get:Size(max = 50)
    override var lastName: String,
    @get:NotNull
    @get:Size(max = 50)
    override var firstName: String,
    @get:NotNull
    @get:Size(max = 10)
    override var extension: String,
    @get:NotNull
    @get:Size(max = 100)
    override var email: String,
    @get:NotNull
    @get:Size(max = 10)
    override var officeCode: String,
    @get:NotNull
    override var salary: Int,
    override var commission: Int? = null,
    override var reportsTo: Long? = null,
    @get:NotNull
    @get:Size(max = 50)
    override var jobTitle: String,
    override var employeeOfYear: Array<Int?>? = null,
    override var monthlyBonus: Array<Int?>? = null
): IEmployee {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Employee = other as Employee
        if (this.employeeNumber != o.employeeNumber)
            return false
        if (this.lastName != o.lastName)
            return false
        if (this.firstName != o.firstName)
            return false
        if (this.extension != o.extension)
            return false
        if (this.email != o.email)
            return false
        if (this.officeCode != o.officeCode)
            return false
        if (this.salary != o.salary)
            return false
        if (this.commission == null) {
            if (o.commission != null)
                return false
        }
        else if (this.commission != o.commission)
            return false
        if (this.reportsTo == null) {
            if (o.reportsTo != null)
                return false
        }
        else if (this.reportsTo != o.reportsTo)
            return false
        if (this.jobTitle != o.jobTitle)
            return false
        if (this.employeeOfYear == null) {
            if (o.employeeOfYear != null)
                return false
        }
        else if (!Arrays.deepEquals(this.employeeOfYear, o.employeeOfYear))
            return false
        if (this.monthlyBonus == null) {
            if (o.monthlyBonus != null)
                return false
        }
        else if (!Arrays.deepEquals(this.monthlyBonus, o.monthlyBonus))
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.employeeNumber.hashCode()
        result = prime * result + this.lastName.hashCode()
        result = prime * result + this.firstName.hashCode()
        result = prime * result + this.extension.hashCode()
        result = prime * result + this.email.hashCode()
        result = prime * result + this.officeCode.hashCode()
        result = prime * result + this.salary.hashCode()
        result = prime * result + (if (this.commission == null) 0 else this.commission.hashCode())
        result = prime * result + (if (this.reportsTo == null) 0 else this.reportsTo.hashCode())
        result = prime * result + this.jobTitle.hashCode()
        result = prime * result + (if (this.employeeOfYear == null) 0 else Arrays.deepHashCode(this.employeeOfYear))
        result = prime * result + (if (this.monthlyBonus == null) 0 else Arrays.deepHashCode(this.monthlyBonus))
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Employee (")

        sb.append(employeeNumber)
        sb.append(", ").append(lastName)
        sb.append(", ").append(firstName)
        sb.append(", ").append(extension)
        sb.append(", ").append(email)
        sb.append(", ").append(officeCode)
        sb.append(", ").append(salary)
        sb.append(", ").append(commission)
        sb.append(", ").append(reportsTo)
        sb.append(", ").append(jobTitle)
        sb.append(", ").append(Arrays.deepToString(employeeOfYear))
        sb.append(", ").append(Arrays.deepToString(monthlyBonus))

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IEmployee) {
        this.employeeNumber = from.employeeNumber
        this.lastName = from.lastName
        this.firstName = from.firstName
        this.extension = from.extension
        this.email = from.email
        this.officeCode = from.officeCode
        this.salary = from.salary
        this.commission = from.commission
        this.reportsTo = from.reportsTo
        this.jobTitle = from.jobTitle
        this.employeeOfYear = from.employeeOfYear
        this.monthlyBonus = from.monthlyBonus
    }
}
