/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.LocalDate
import java.util.Arrays

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IProductline

import org.jooq.XML


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Productline(
    @get:NotNull
    @get:Size(max = 50)
    override var productLine: String,
    @get:NotNull
    override var code: Long,
    @get:Size(max = 4000)
    override var textDescription: String? = null,
    override var htmlDescription: XML? = null,
    override var image: ByteArray? = null,
    override var createdOn: LocalDate? = null
): IProductline {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Productline = other as Productline
        if (this.productLine != o.productLine)
            return false
        if (this.code != o.code)
            return false
        if (this.textDescription == null) {
            if (o.textDescription != null)
                return false
        }
        else if (this.textDescription != o.textDescription)
            return false
        if (this.htmlDescription == null) {
            if (o.htmlDescription != null)
                return false
        }
        else if (this.htmlDescription != o.htmlDescription)
            return false
        if (this.image == null) {
            if (o.image != null)
                return false
        }
        else if (!Arrays.equals(this.image, o.image))
            return false
        if (this.createdOn == null) {
            if (o.createdOn != null)
                return false
        }
        else if (this.createdOn != o.createdOn)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.productLine.hashCode()
        result = prime * result + this.code.hashCode()
        result = prime * result + (if (this.textDescription == null) 0 else this.textDescription.hashCode())
        result = prime * result + (if (this.htmlDescription == null) 0 else this.htmlDescription.hashCode())
        result = prime * result + (if (this.image == null) 0 else Arrays.hashCode(this.image))
        result = prime * result + (if (this.createdOn == null) 0 else this.createdOn.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Productline (")

        sb.append(productLine)
        sb.append(", ").append(code)
        sb.append(", ").append(textDescription)
        sb.append(", ").append(htmlDescription)
        sb.append(", ").append("[binary...]")
        sb.append(", ").append(createdOn)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IProductline) {
        this.productLine = from.productLine
        this.code = from.code
        this.textDescription = from.textDescription
        this.htmlDescription = from.htmlDescription
        this.image = from.image
        this.createdOn = from.createdOn
    }
}
