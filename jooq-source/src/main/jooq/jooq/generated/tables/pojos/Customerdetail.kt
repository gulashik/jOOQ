/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.ICustomerdetail


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Customerdetail(
    @get:NotNull
    override var customerNumber: Long,
    @get:NotNull
    @get:Size(max = 50)
    override var addressLineFirst: String,
    @get:Size(max = 50)
    override var addressLineSecond: String? = null,
    @get:Size(max = 50)
    override var city: String? = null,
    @get:Size(max = 50)
    override var state: String? = null,
    @get:Size(max = 15)
    override var postalCode: String? = null,
    @get:Size(max = 50)
    override var country: String? = null
): ICustomerdetail {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Customerdetail = other as Customerdetail
        if (this.customerNumber != o.customerNumber)
            return false
        if (this.addressLineFirst != o.addressLineFirst)
            return false
        if (this.addressLineSecond == null) {
            if (o.addressLineSecond != null)
                return false
        }
        else if (this.addressLineSecond != o.addressLineSecond)
            return false
        if (this.city == null) {
            if (o.city != null)
                return false
        }
        else if (this.city != o.city)
            return false
        if (this.state == null) {
            if (o.state != null)
                return false
        }
        else if (this.state != o.state)
            return false
        if (this.postalCode == null) {
            if (o.postalCode != null)
                return false
        }
        else if (this.postalCode != o.postalCode)
            return false
        if (this.country == null) {
            if (o.country != null)
                return false
        }
        else if (this.country != o.country)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.customerNumber.hashCode()
        result = prime * result + this.addressLineFirst.hashCode()
        result = prime * result + (if (this.addressLineSecond == null) 0 else this.addressLineSecond.hashCode())
        result = prime * result + (if (this.city == null) 0 else this.city.hashCode())
        result = prime * result + (if (this.state == null) 0 else this.state.hashCode())
        result = prime * result + (if (this.postalCode == null) 0 else this.postalCode.hashCode())
        result = prime * result + (if (this.country == null) 0 else this.country.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Customerdetail (")

        sb.append(customerNumber)
        sb.append(", ").append(addressLineFirst)
        sb.append(", ").append(addressLineSecond)
        sb.append(", ").append(city)
        sb.append(", ").append(state)
        sb.append(", ").append(postalCode)
        sb.append(", ").append(country)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: ICustomerdetail) {
        this.customerNumber = from.customerNumber
        this.addressLineFirst = from.addressLineFirst
        this.addressLineSecond = from.addressLineSecond
        this.city = from.city
        this.state = from.state
        this.postalCode = from.postalCode
        this.country = from.country
    }
}
