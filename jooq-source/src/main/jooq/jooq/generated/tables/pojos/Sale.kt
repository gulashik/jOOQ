/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.enums.RateType
import jooq.generated.enums.VatType
import jooq.generated.tables.interfaces.ISale


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Sale(
    override var saleId: Long? = null,
    @get:NotNull
    override var fiscalYear: Int,
    @get:NotNull
    override var sale: Double,
    override var employeeNumber: Long? = null,
    override var hot: Boolean? = null,
    override var rate: RateType? = null,
    override var vat: VatType? = null,
    @get:NotNull
    override var fiscalMonth: Int,
    @get:NotNull
    override var revenueGrowth: Double,
    @get:Size(max = 10)
    override var trend: String? = null
): ISale {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Sale = other as Sale
        if (this.saleId == null) {
            if (o.saleId != null)
                return false
        }
        else if (this.saleId != o.saleId)
            return false
        if (this.fiscalYear != o.fiscalYear)
            return false
        if (this.sale != o.sale)
            return false
        if (this.employeeNumber == null) {
            if (o.employeeNumber != null)
                return false
        }
        else if (this.employeeNumber != o.employeeNumber)
            return false
        if (this.hot == null) {
            if (o.hot != null)
                return false
        }
        else if (this.hot != o.hot)
            return false
        if (this.rate == null) {
            if (o.rate != null)
                return false
        }
        else if (this.rate != o.rate)
            return false
        if (this.vat == null) {
            if (o.vat != null)
                return false
        }
        else if (this.vat != o.vat)
            return false
        if (this.fiscalMonth != o.fiscalMonth)
            return false
        if (this.revenueGrowth != o.revenueGrowth)
            return false
        if (this.trend == null) {
            if (o.trend != null)
                return false
        }
        else if (this.trend != o.trend)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.saleId == null) 0 else this.saleId.hashCode())
        result = prime * result + this.fiscalYear.hashCode()
        result = prime * result + this.sale.hashCode()
        result = prime * result + (if (this.employeeNumber == null) 0 else this.employeeNumber.hashCode())
        result = prime * result + (if (this.hot == null) 0 else this.hot.hashCode())
        result = prime * result + (if (this.rate == null) 0 else this.rate.hashCode())
        result = prime * result + (if (this.vat == null) 0 else this.vat.hashCode())
        result = prime * result + this.fiscalMonth.hashCode()
        result = prime * result + this.revenueGrowth.hashCode()
        result = prime * result + (if (this.trend == null) 0 else this.trend.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Sale (")

        sb.append(saleId)
        sb.append(", ").append(fiscalYear)
        sb.append(", ").append(sale)
        sb.append(", ").append(employeeNumber)
        sb.append(", ").append(hot)
        sb.append(", ").append(rate)
        sb.append(", ").append(vat)
        sb.append(", ").append(fiscalMonth)
        sb.append(", ").append(revenueGrowth)
        sb.append(", ").append(trend)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: ISale) {
        this.saleId = from.saleId
        this.fiscalYear = from.fiscalYear
        this.sale = from.sale
        this.employeeNumber = from.employeeNumber
        this.hot = from.hot
        this.rate = from.rate
        this.vat = from.vat
        this.fiscalMonth = from.fiscalMonth
        this.revenueGrowth = from.revenueGrowth
        this.trend = from.trend
    }
}
