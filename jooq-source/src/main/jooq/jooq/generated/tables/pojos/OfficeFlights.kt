/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IOfficeFlights


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class OfficeFlights(
    @get:NotNull
    @get:Size(max = 32)
    override var departTown: String,
    @get:NotNull
    @get:Size(max = 32)
    override var arrivalTown: String,
    @get:NotNull
    override var distanceKm: Int
): IOfficeFlights {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: OfficeFlights = other as OfficeFlights
        if (this.departTown != o.departTown)
            return false
        if (this.arrivalTown != o.arrivalTown)
            return false
        if (this.distanceKm != o.distanceKm)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.departTown.hashCode()
        result = prime * result + this.arrivalTown.hashCode()
        result = prime * result + this.distanceKm.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("OfficeFlights (")

        sb.append(departTown)
        sb.append(", ").append(arrivalTown)
        sb.append(", ").append(distanceKm)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IOfficeFlights) {
        this.departTown = from.departTown
        this.arrivalTown = from.arrivalTown
        this.distanceKm = from.distanceKm
    }
}
