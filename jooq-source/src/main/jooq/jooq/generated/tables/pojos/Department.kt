/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.util.Arrays

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IDepartment


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Department(
    override var departmentId: Int? = null,
    @get:NotNull
    @get:Size(max = 50)
    override var name: String,
    @get:NotNull
    @get:Size(max = 50)
    override var phone: String,
    @get:NotNull
    override var code: Int,
    @get:NotNull
    @get:Size(max = 10)
    override var officeCode: String,
    override var topic: Array<String?>? = null,
    override var depNetIpv4: Any? = null,
    override var localBudget: Double? = null,
    override var profit: Double? = null,
    override var forecastProfit: Double? = null,
    override var cash: Double? = null,
    override var accountsReceivable: Double? = null,
    override var inventories: Double? = null,
    override var accountsPayable: Double? = null,
    override var stBorrowing: Double? = null,
    override var accruedLiabilities: Double? = null
): IDepartment {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Department = other as Department
        if (this.departmentId == null) {
            if (o.departmentId != null)
                return false
        }
        else if (this.departmentId != o.departmentId)
            return false
        if (this.name != o.name)
            return false
        if (this.phone != o.phone)
            return false
        if (this.code != o.code)
            return false
        if (this.officeCode != o.officeCode)
            return false
        if (this.topic == null) {
            if (o.topic != null)
                return false
        }
        else if (!Arrays.deepEquals(this.topic, o.topic))
            return false
        if (this.depNetIpv4 == null) {
            if (o.depNetIpv4 != null)
                return false
        }
        else if (this.depNetIpv4 != o.depNetIpv4)
            return false
        if (this.localBudget == null) {
            if (o.localBudget != null)
                return false
        }
        else if (this.localBudget != o.localBudget)
            return false
        if (this.profit == null) {
            if (o.profit != null)
                return false
        }
        else if (this.profit != o.profit)
            return false
        if (this.forecastProfit == null) {
            if (o.forecastProfit != null)
                return false
        }
        else if (this.forecastProfit != o.forecastProfit)
            return false
        if (this.cash == null) {
            if (o.cash != null)
                return false
        }
        else if (this.cash != o.cash)
            return false
        if (this.accountsReceivable == null) {
            if (o.accountsReceivable != null)
                return false
        }
        else if (this.accountsReceivable != o.accountsReceivable)
            return false
        if (this.inventories == null) {
            if (o.inventories != null)
                return false
        }
        else if (this.inventories != o.inventories)
            return false
        if (this.accountsPayable == null) {
            if (o.accountsPayable != null)
                return false
        }
        else if (this.accountsPayable != o.accountsPayable)
            return false
        if (this.stBorrowing == null) {
            if (o.stBorrowing != null)
                return false
        }
        else if (this.stBorrowing != o.stBorrowing)
            return false
        if (this.accruedLiabilities == null) {
            if (o.accruedLiabilities != null)
                return false
        }
        else if (this.accruedLiabilities != o.accruedLiabilities)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.departmentId == null) 0 else this.departmentId.hashCode())
        result = prime * result + this.name.hashCode()
        result = prime * result + this.phone.hashCode()
        result = prime * result + this.code.hashCode()
        result = prime * result + this.officeCode.hashCode()
        result = prime * result + (if (this.topic == null) 0 else Arrays.deepHashCode(this.topic))
        result = prime * result + (if (this.depNetIpv4 == null) 0 else this.depNetIpv4.hashCode())
        result = prime * result + (if (this.localBudget == null) 0 else this.localBudget.hashCode())
        result = prime * result + (if (this.profit == null) 0 else this.profit.hashCode())
        result = prime * result + (if (this.forecastProfit == null) 0 else this.forecastProfit.hashCode())
        result = prime * result + (if (this.cash == null) 0 else this.cash.hashCode())
        result = prime * result + (if (this.accountsReceivable == null) 0 else this.accountsReceivable.hashCode())
        result = prime * result + (if (this.inventories == null) 0 else this.inventories.hashCode())
        result = prime * result + (if (this.accountsPayable == null) 0 else this.accountsPayable.hashCode())
        result = prime * result + (if (this.stBorrowing == null) 0 else this.stBorrowing.hashCode())
        result = prime * result + (if (this.accruedLiabilities == null) 0 else this.accruedLiabilities.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Department (")

        sb.append(departmentId)
        sb.append(", ").append(name)
        sb.append(", ").append(phone)
        sb.append(", ").append(code)
        sb.append(", ").append(officeCode)
        sb.append(", ").append(Arrays.deepToString(topic))
        sb.append(", ").append(depNetIpv4)
        sb.append(", ").append(localBudget)
        sb.append(", ").append(profit)
        sb.append(", ").append(forecastProfit)
        sb.append(", ").append(cash)
        sb.append(", ").append(accountsReceivable)
        sb.append(", ").append(inventories)
        sb.append(", ").append(accountsPayable)
        sb.append(", ").append(stBorrowing)
        sb.append(", ").append(accruedLiabilities)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IDepartment) {
        this.departmentId = from.departmentId
        this.name = from.name
        this.phone = from.phone
        this.code = from.code
        this.officeCode = from.officeCode
        this.topic = from.topic
        this.depNetIpv4 = from.depNetIpv4
        this.localBudget = from.localBudget
        this.profit = from.profit
        this.forecastProfit = from.forecastProfit
        this.cash = from.cash
        this.accountsReceivable = from.accountsReceivable
        this.inventories = from.inventories
        this.accountsPayable = from.accountsPayable
        this.stBorrowing = from.stBorrowing
        this.accruedLiabilities = from.accruedLiabilities
    }
}
