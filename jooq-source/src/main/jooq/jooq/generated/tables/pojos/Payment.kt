/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.pojos


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal
import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.tables.interfaces.IPayment


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
data class Payment(
    @get:NotNull
    override var customerNumber: Long,
    @get:NotNull
    @get:Size(max = 50)
    override var checkNumber: String,
    override var paymentDate: LocalDateTime? = null,
    @get:NotNull
    override var invoiceAmount: BigDecimal,
    override var cachingDate: LocalDateTime? = null,
    override var version: Int? = null,
    override var modified: LocalDateTime? = null
): IPayment {


    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: Payment = other as Payment
        if (this.customerNumber != o.customerNumber)
            return false
        if (this.checkNumber != o.checkNumber)
            return false
        if (this.paymentDate == null) {
            if (o.paymentDate != null)
                return false
        }
        else if (this.paymentDate != o.paymentDate)
            return false
        if (this.invoiceAmount != o.invoiceAmount)
            return false
        if (this.cachingDate == null) {
            if (o.cachingDate != null)
                return false
        }
        else if (this.cachingDate != o.cachingDate)
            return false
        if (this.version == null) {
            if (o.version != null)
                return false
        }
        else if (this.version != o.version)
            return false
        if (this.modified == null) {
            if (o.modified != null)
                return false
        }
        else if (this.modified != o.modified)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.customerNumber.hashCode()
        result = prime * result + this.checkNumber.hashCode()
        result = prime * result + (if (this.paymentDate == null) 0 else this.paymentDate.hashCode())
        result = prime * result + this.invoiceAmount.hashCode()
        result = prime * result + (if (this.cachingDate == null) 0 else this.cachingDate.hashCode())
        result = prime * result + (if (this.version == null) 0 else this.version.hashCode())
        result = prime * result + (if (this.modified == null) 0 else this.modified.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Payment (")

        sb.append(customerNumber)
        sb.append(", ").append(checkNumber)
        sb.append(", ").append(paymentDate)
        sb.append(", ").append(invoiceAmount)
        sb.append(", ").append(cachingDate)
        sb.append(", ").append(version)
        sb.append(", ").append(modified)

        sb.append(")")
        return sb.toString()
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IPayment) {
        this.customerNumber = from.customerNumber
        this.checkNumber = from.checkNumber
        this.paymentDate = from.paymentDate
        this.invoiceAmount = from.invoiceAmount
        this.cachingDate = from.cachingDate
        this.version = from.version
        this.modified = from.modified
    }
}
