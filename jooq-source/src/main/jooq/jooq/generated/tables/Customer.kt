/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.CustomerRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Customer(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CustomerRecord>?,
    aliased: Table<CustomerRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CustomerRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.customer</code>
         */
        val CUSTOMER: Customer = Customer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CustomerRecord> = CustomerRecord::class.java

    /**
     * The column <code>public.customer.customer_number</code>.
     */
    val CUSTOMER_NUMBER: TableField<CustomerRecord, Long?> = createField(DSL.name("customer_number"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.customer.customer_name</code>.
     */
    val CUSTOMER_NAME: TableField<CustomerRecord, String?> = createField(DSL.name("customer_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.customer.contact_last_name</code>.
     */
    val CONTACT_LAST_NAME: TableField<CustomerRecord, String?> = createField(DSL.name("contact_last_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.customer.contact_first_name</code>.
     */
    val CONTACT_FIRST_NAME: TableField<CustomerRecord, String?> = createField(DSL.name("contact_first_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.customer.phone</code>.
     */
    val PHONE: TableField<CustomerRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.customer.sales_rep_employee_number</code>.
     */
    val SALES_REP_EMPLOYEE_NUMBER: TableField<CustomerRecord, Long?> = createField(DSL.name("sales_rep_employee_number"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.customer.credit_limit</code>.
     */
    val CREDIT_LIMIT: TableField<CustomerRecord, BigDecimal?> = createField(DSL.name("credit_limit"), SQLDataType.NUMERIC(10, 2).defaultValue(DSL.field(DSL.raw("NULL::numeric"), SQLDataType.NUMERIC)), this, "")

    /**
     * The column <code>public.customer.first_buy_date</code>.
     */
    val FIRST_BUY_DATE: TableField<CustomerRecord, Int?> = createField(DSL.name("first_buy_date"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<CustomerRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CustomerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.customer</code> table reference
     */
    constructor(): this(DSL.name("customer"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<CustomerRecord, Long?> = super.getIdentity() as Identity<CustomerRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<CustomerRecord> = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pk"), arrayOf(Customer.CUSTOMER.CUSTOMER_NUMBER), true)
    override fun getUniqueKeys(): List<UniqueKey<CustomerRecord>> = listOf(
        Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_name_uk"), arrayOf(Customer.CUSTOMER.CUSTOMER_NAME), true)
    )
    override fun `as`(alias: String): Customer = Customer(DSL.name(alias), this)
    override fun `as`(alias: Name): Customer = Customer(alias, this)
    override fun `as`(alias: Table<*>): Customer = Customer(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Customer = Customer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Customer = Customer(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Customer = Customer(name.getQualifiedName(), null)
}
