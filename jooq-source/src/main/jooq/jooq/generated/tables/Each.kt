/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.EachRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Each(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EachRecord>?,
    aliased: Table<EachRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EachRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.each</code>
         */
        val EACH: Each = Each()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EachRecord> = EachRecord::class.java

    /**
     * The column <code>public.each.key</code>.
     */
    val KEY: TableField<EachRecord, String?> = createField(DSL.name("key"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.each.value</code>.
     */
    val VALUE: TableField<EachRecord, String?> = createField(DSL.name("value"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<EachRecord>?): this(alias, null, null, aliased, arrayOf(
        DSL.value(null, org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"hstore\""))
    ))
    private constructor(alias: Name, aliased: Table<EachRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.each</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.each</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.each</code> table reference
     */
    constructor(): this(DSL.name("each"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): Each = Each(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): Each = Each(alias, this, parameters)
    override fun `as`(alias: Table<*>): Each = Each(alias.getQualifiedName(), this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): Each = Each(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Each = Each(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Each = Each(name.getQualifiedName(), null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          hs: Any?
    ): Each = Each(DSL.name("each"), null, arrayOf(
        DSL.value(hs, org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"hstore\""))
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          hs: Field<Any?>
    ): Each = Each(DSL.name("each"), null, arrayOf(
        hs
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
