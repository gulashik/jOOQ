/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.CustomerMasterRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class CustomerMaster(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CustomerMasterRecord>?,
    aliased: Table<CustomerMasterRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CustomerMasterRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "customer_master" as  SELECT customer.customer_name,
      customer.credit_limit,
      customerdetail.city,
      customerdetail.country,
      customerdetail.address_line_first,
      customerdetail.postal_code,
      customerdetail.state
     FROM (customer
       JOIN customerdetail ON ((customerdetail.customer_number = customer.customer_number)))
    WHERE (customer.first_buy_date IS NOT NULL);
    """)
) {
    companion object {

        /**
         * The reference instance of <code>public.customer_master</code>
         */
        val CUSTOMER_MASTER: CustomerMaster = CustomerMaster()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CustomerMasterRecord> = CustomerMasterRecord::class.java

    /**
     * The column <code>public.customer_master.customer_name</code>.
     */
    val CUSTOMER_NAME: TableField<CustomerMasterRecord, String?> = createField(DSL.name("customer_name"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.customer_master.credit_limit</code>.
     */
    val CREDIT_LIMIT: TableField<CustomerMasterRecord, BigDecimal?> = createField(DSL.name("credit_limit"), SQLDataType.NUMERIC(10, 2), this, "")

    /**
     * The column <code>public.customer_master.city</code>.
     */
    val CITY: TableField<CustomerMasterRecord, String?> = createField(DSL.name("city"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.customer_master.country</code>.
     */
    val COUNTRY: TableField<CustomerMasterRecord, String?> = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.customer_master.address_line_first</code>.
     */
    val ADDRESS_LINE_FIRST: TableField<CustomerMasterRecord, String?> = createField(DSL.name("address_line_first"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.customer_master.postal_code</code>.
     */
    val POSTAL_CODE: TableField<CustomerMasterRecord, String?> = createField(DSL.name("postal_code"), SQLDataType.VARCHAR(15), this, "")

    /**
     * The column <code>public.customer_master.state</code>.
     */
    val STATE: TableField<CustomerMasterRecord, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(50), this, "")

    private constructor(alias: Name, aliased: Table<CustomerMasterRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CustomerMasterRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.customer_master</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.customer_master</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.customer_master</code> table reference
     */
    constructor(): this(DSL.name("customer_master"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): CustomerMaster = CustomerMaster(DSL.name(alias), this)
    override fun `as`(alias: Name): CustomerMaster = CustomerMaster(alias, this)
    override fun `as`(alias: Table<*>): CustomerMaster = CustomerMaster(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CustomerMaster = CustomerMaster(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CustomerMaster = CustomerMaster(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): CustomerMaster = CustomerMaster(name.getQualifiedName(), null)
}
