/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.ProductOfProductLineRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class ProductOfProductLine(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProductOfProductLineRecord>?,
    aliased: Table<ProductOfProductLineRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProductOfProductLineRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.product_of_product_line</code>
         */
        val PRODUCT_OF_PRODUCT_LINE: ProductOfProductLine = ProductOfProductLine()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProductOfProductLineRecord> = ProductOfProductLineRecord::class.java

    /**
     * The column <code>public.product_of_product_line.p_id</code>.
     */
    val P_ID: TableField<ProductOfProductLineRecord, Long?> = createField(DSL.name("p_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.product_of_product_line.p_name</code>.
     */
    val P_NAME: TableField<ProductOfProductLineRecord, String?> = createField(DSL.name("p_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.product_of_product_line.p_line</code>.
     */
    val P_LINE: TableField<ProductOfProductLineRecord, String?> = createField(DSL.name("p_line"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<ProductOfProductLineRecord>?): this(alias, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.VARCHAR)
    ))
    private constructor(alias: Name, aliased: Table<ProductOfProductLineRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.product_of_product_line</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.product_of_product_line</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.product_of_product_line</code> table reference
     */
    constructor(): this(DSL.name("product_of_product_line"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): ProductOfProductLine = ProductOfProductLine(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): ProductOfProductLine = ProductOfProductLine(alias, this, parameters)
    override fun `as`(alias: Table<*>): ProductOfProductLine = ProductOfProductLine(alias.getQualifiedName(), this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): ProductOfProductLine = ProductOfProductLine(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ProductOfProductLine = ProductOfProductLine(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ProductOfProductLine = ProductOfProductLine(name.getQualifiedName(), null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
          pLineIn: String?
    ): ProductOfProductLine = ProductOfProductLine(DSL.name("product_of_product_line"), null, arrayOf(
        DSL.value(pLineIn, SQLDataType.VARCHAR)
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          pLineIn: Field<String?>
    ): ProductOfProductLine = ProductOfProductLine(DSL.name("product_of_product_line"), null, arrayOf(
        pLineIn
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
