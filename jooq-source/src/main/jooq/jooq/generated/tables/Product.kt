/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.ProductRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Product(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProductRecord>?,
    aliased: Table<ProductRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProductRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.product</code>
         */
        val PRODUCT: Product = Product()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProductRecord> = ProductRecord::class.java

    /**
     * The column <code>public.product.product_id</code>.
     */
    val PRODUCT_ID: TableField<ProductRecord, Long?> = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("nextval('product_seq'::regclass)"), SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>public.product.product_name</code>.
     */
    val PRODUCT_NAME: TableField<ProductRecord, String?> = createField(DSL.name("product_name"), SQLDataType.VARCHAR(70).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.product.product_line</code>.
     */
    val PRODUCT_LINE: TableField<ProductRecord, String?> = createField(DSL.name("product_line"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.product.code</code>.
     */
    val CODE: TableField<ProductRecord, Long?> = createField(DSL.name("code"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.product.product_scale</code>.
     */
    val PRODUCT_SCALE: TableField<ProductRecord, String?> = createField(DSL.name("product_scale"), SQLDataType.VARCHAR(10).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.product.product_vendor</code>.
     */
    val PRODUCT_VENDOR: TableField<ProductRecord, String?> = createField(DSL.name("product_vendor"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.product.product_description</code>.
     */
    val PRODUCT_DESCRIPTION: TableField<ProductRecord, String?> = createField(DSL.name("product_description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.product.quantity_in_stock</code>.
     */
    val QUANTITY_IN_STOCK: TableField<ProductRecord, Int?> = createField(DSL.name("quantity_in_stock"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>public.product.buy_price</code>.
     */
    val BUY_PRICE: TableField<ProductRecord, BigDecimal?> = createField(DSL.name("buy_price"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.0"), SQLDataType.NUMERIC)), this, "")

    /**
     * The column <code>public.product.msrp</code>.
     */
    val MSRP: TableField<ProductRecord, BigDecimal?> = createField(DSL.name("msrp"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.0"), SQLDataType.NUMERIC)), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val SPECS: TableField<ProductRecord, Any?> = createField(DSL.name("specs"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"hstore\""), this, "")

    /**
     * The column <code>public.product.product_uid</code>.
     */
    val PRODUCT_UID: TableField<ProductRecord, Long?> = createField(DSL.name("product_uid"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    private constructor(alias: Name, aliased: Table<ProductRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProductRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.product</code> table reference
     */
    constructor(): this(DSL.name("product"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ProductRecord, Long?> = super.getIdentity() as Identity<ProductRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ProductRecord> = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pk"), arrayOf(Product.PRODUCT.PRODUCT_ID), true)
    override fun `as`(alias: String): Product = Product(DSL.name(alias), this)
    override fun `as`(alias: Name): Product = Product(alias, this)
    override fun `as`(alias: Table<*>): Product = Product(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Product = Product(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Product = Product(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Product = Product(name.getQualifiedName(), null)
}
