/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.DepartmentRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Department(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DepartmentRecord>?,
    aliased: Table<DepartmentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DepartmentRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.department</code>
         */
        val DEPARTMENT: Department = Department()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DepartmentRecord> = DepartmentRecord::class.java

    /**
     * The column <code>public.department.department_id</code>.
     */
    val DEPARTMENT_ID: TableField<DepartmentRecord, Int?> = createField(DSL.name("department_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.department.name</code>.
     */
    val NAME: TableField<DepartmentRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.department.phone</code>.
     */
    val PHONE: TableField<DepartmentRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.department.code</code>.
     */
    val CODE: TableField<DepartmentRecord, Int?> = createField(DSL.name("code"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.department.office_code</code>.
     */
    val OFFICE_CODE: TableField<DepartmentRecord, String?> = createField(DSL.name("office_code"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>public.department.topic</code>.
     */
    val TOPIC: TableField<DepartmentRecord, Array<String?>?> = createField(DSL.name("topic"), SQLDataType.CLOB.array(), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val DEP_NET_IPV4: TableField<DepartmentRecord, Any?> = createField(DSL.name("dep_net_ipv4"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "")

    /**
     * The column <code>public.department.local_budget</code>.
     */
    val LOCAL_BUDGET: TableField<DepartmentRecord, Double?> = createField(DSL.name("local_budget"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.profit</code>.
     */
    val PROFIT: TableField<DepartmentRecord, Double?> = createField(DSL.name("profit"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.forecast_profit</code>.
     */
    val FORECAST_PROFIT: TableField<DepartmentRecord, Double?> = createField(DSL.name("forecast_profit"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.cash</code>.
     */
    val CASH: TableField<DepartmentRecord, Double?> = createField(DSL.name("cash"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.accounts_receivable</code>.
     */
    val ACCOUNTS_RECEIVABLE: TableField<DepartmentRecord, Double?> = createField(DSL.name("accounts_receivable"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.inventories</code>.
     */
    val INVENTORIES: TableField<DepartmentRecord, Double?> = createField(DSL.name("inventories"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.accounts_payable</code>.
     */
    val ACCOUNTS_PAYABLE: TableField<DepartmentRecord, Double?> = createField(DSL.name("accounts_payable"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.st_borrowing</code>.
     */
    val ST_BORROWING: TableField<DepartmentRecord, Double?> = createField(DSL.name("st_borrowing"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>public.department.accrued_liabilities</code>.
     */
    val ACCRUED_LIABILITIES: TableField<DepartmentRecord, Double?> = createField(DSL.name("accrued_liabilities"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<DepartmentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DepartmentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.department</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.department</code> table reference
     */
    constructor(): this(DSL.name("department"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<DepartmentRecord, Int?> = super.getIdentity() as Identity<DepartmentRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<DepartmentRecord> = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("department_pk"), arrayOf(Department.DEPARTMENT.DEPARTMENT_ID), true)
    override fun getUniqueKeys(): List<UniqueKey<DepartmentRecord>> = listOf(
        Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("department_code_uk"), arrayOf(Department.DEPARTMENT.CODE), true)
    )
    override fun `as`(alias: String): Department = Department(DSL.name(alias), this)
    override fun `as`(alias: Name): Department = Department(alias, this)
    override fun `as`(alias: Table<*>): Department = Department(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Department = Department(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Department = Department(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Department = Department(name.getQualifiedName(), null)
}
