/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal
import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.tables.Payment
import jooq.generated.tables.interfaces.IPayment

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class PaymentRecord private constructor() : UpdatableRecordImpl<PaymentRecord>(Payment.PAYMENT), IPayment {

    @get:NotNull
    open override var customerNumber: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    @get:NotNull
    @get:Size(max = 50)
    open override var checkNumber: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open override var paymentDate: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    @get:NotNull
    open override var invoiceAmount: BigDecimal
        set(value): Unit = set(3, value)
        get(): BigDecimal = get(3) as BigDecimal

    open override var cachingDate: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open override var version: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open override var modified: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, String?> = super.key() as Record2<Long?, String?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IPayment) {
        this.customerNumber = from.customerNumber
        this.checkNumber = from.checkNumber
        this.paymentDate = from.paymentDate
        this.invoiceAmount = from.invoiceAmount
        this.cachingDate = from.cachingDate
        this.version = from.version
        this.modified = from.modified
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PaymentRecord
     */
    constructor(customerNumber: Long, checkNumber: String, paymentDate: LocalDateTime? = null, invoiceAmount: BigDecimal, cachingDate: LocalDateTime? = null, version: Int? = null, modified: LocalDateTime? = null): this() {
        this.customerNumber = customerNumber
        this.checkNumber = checkNumber
        this.paymentDate = paymentDate
        this.invoiceAmount = invoiceAmount
        this.cachingDate = cachingDate
        this.version = version
        this.modified = modified
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PaymentRecord
     */
    constructor(value: jooq.generated.tables.pojos.Payment?): this() {
        if (value != null) {
            this.customerNumber = value.customerNumber
            this.checkNumber = value.checkNumber
            this.paymentDate = value.paymentDate
            this.invoiceAmount = value.invoiceAmount
            this.cachingDate = value.cachingDate
            this.version = value.version
            this.modified = value.modified
            resetChangedOnNotNull()
        }
    }
}
