/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import javax.annotation.processing.Generated

import jooq.generated.tables.ProductOfProductLine
import jooq.generated.tables.interfaces.IProductOfProductLine

import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class ProductOfProductLineRecord private constructor() : TableRecordImpl<ProductOfProductLineRecord>(ProductOfProductLine.PRODUCT_OF_PRODUCT_LINE), IProductOfProductLine {

    open override var pId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open override var pName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open override var pLine: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IProductOfProductLine) {
        this.pId = from.pId
        this.pName = from.pName
        this.pLine = from.pLine
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ProductOfProductLineRecord
     */
    constructor(pId: Long? = null, pName: String? = null, pLine: String? = null): this() {
        this.pId = pId
        this.pName = pName
        this.pLine = pLine
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ProductOfProductLineRecord
     */
    constructor(value: jooq.generated.tables.pojos.ProductOfProductLine?): this() {
        if (value != null) {
            this.pId = value.pId
            this.pName = value.pName
            this.pLine = value.pLine
            resetChangedOnNotNull()
        }
    }
}
