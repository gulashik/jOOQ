/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.tables.Customer
import jooq.generated.tables.interfaces.ICustomer

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class CustomerRecord private constructor() : UpdatableRecordImpl<CustomerRecord>(Customer.CUSTOMER), ICustomer {

    open override var customerNumber: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:NotNull
    @get:Size(max = 50)
    open override var customerName: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    @get:NotNull
    @get:Size(max = 50)
    open override var contactLastName: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    @get:NotNull
    @get:Size(max = 50)
    open override var contactFirstName: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    @get:NotNull
    @get:Size(max = 50)
    open override var phone: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open override var salesRepEmployeeNumber: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open override var creditLimit: BigDecimal?
        set(value): Unit = set(6, value)
        get(): BigDecimal? = get(6) as BigDecimal?

    open override var firstBuyDate: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: ICustomer) {
        this.customerNumber = from.customerNumber
        this.customerName = from.customerName
        this.contactLastName = from.contactLastName
        this.contactFirstName = from.contactFirstName
        this.phone = from.phone
        this.salesRepEmployeeNumber = from.salesRepEmployeeNumber
        this.creditLimit = from.creditLimit
        this.firstBuyDate = from.firstBuyDate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(customerNumber: Long? = null, customerName: String, contactLastName: String, contactFirstName: String, phone: String, salesRepEmployeeNumber: Long? = null, creditLimit: BigDecimal? = null, firstBuyDate: Int? = null): this() {
        this.customerNumber = customerNumber
        this.customerName = customerName
        this.contactLastName = contactLastName
        this.contactFirstName = contactFirstName
        this.phone = phone
        this.salesRepEmployeeNumber = salesRepEmployeeNumber
        this.creditLimit = creditLimit
        this.firstBuyDate = firstBuyDate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(value: jooq.generated.tables.pojos.Customer?): this() {
        if (value != null) {
            this.customerNumber = value.customerNumber
            this.customerName = value.customerName
            this.contactLastName = value.contactLastName
            this.contactFirstName = value.contactFirstName
            this.phone = value.phone
            this.salesRepEmployeeNumber = value.salesRepEmployeeNumber
            this.creditLimit = value.creditLimit
            this.firstBuyDate = value.firstBuyDate
            resetChangedOnNotNull()
        }
    }
}
