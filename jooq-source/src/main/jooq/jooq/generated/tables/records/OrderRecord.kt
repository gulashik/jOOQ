/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal
import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.Order
import jooq.generated.tables.interfaces.IOrder

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class OrderRecord private constructor() : UpdatableRecordImpl<OrderRecord>(Order.ORDER), IOrder {

    open override var orderId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:NotNull
    open override var orderDate: LocalDate
        set(value): Unit = set(1, value)
        get(): LocalDate = get(1) as LocalDate

    @get:NotNull
    open override var requiredDate: LocalDate
        set(value): Unit = set(2, value)
        get(): LocalDate = get(2) as LocalDate

    open override var shippedDate: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    @get:NotNull
    @get:Size(max = 15)
    open override var status: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open override var comments: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    @get:NotNull
    open override var customerNumber: Long
        set(value): Unit = set(6, value)
        get(): Long = get(6) as Long

    @get:NotNull
    open override var amount: BigDecimal
        set(value): Unit = set(7, value)
        get(): BigDecimal = get(7) as BigDecimal

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IOrder) {
        this.orderId = from.orderId
        this.orderDate = from.orderDate
        this.requiredDate = from.requiredDate
        this.shippedDate = from.shippedDate
        this.status = from.status
        this.comments = from.comments
        this.customerNumber = from.customerNumber
        this.amount = from.amount
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(orderId: Long? = null, orderDate: LocalDate, requiredDate: LocalDate, shippedDate: LocalDate? = null, status: String, comments: String? = null, customerNumber: Long, amount: BigDecimal): this() {
        this.orderId = orderId
        this.orderDate = orderDate
        this.requiredDate = requiredDate
        this.shippedDate = shippedDate
        this.status = status
        this.comments = comments
        this.customerNumber = customerNumber
        this.amount = amount
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised OrderRecord
     */
    constructor(value: jooq.generated.tables.pojos.Order?): this() {
        if (value != null) {
            this.orderId = value.orderId
            this.orderDate = value.orderDate
            this.requiredDate = value.requiredDate
            this.shippedDate = value.shippedDate
            this.status = value.status
            this.comments = value.comments
            this.customerNumber = value.customerNumber
            this.amount = value.amount
            resetChangedOnNotNull()
        }
    }
}
