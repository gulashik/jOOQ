/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import javax.annotation.processing.Generated

import jooq.generated.tables.Each
import jooq.generated.tables.interfaces.IEach

import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class EachRecord private constructor() : TableRecordImpl<EachRecord>(Each.EACH), IEach {

    open override var key: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open override var value: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IEach) {
        this.key = from.key
        this.value = from.value
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EachRecord
     */
    constructor(key: String? = null, value: String? = null): this() {
        this.key = key
        this.value = value
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EachRecord
     */
    constructor(value: jooq.generated.tables.pojos.Each?): this() {
        if (value != null) {
            this.key = value.key
            this.value = value.value
            resetChangedOnNotNull()
        }
    }
}
