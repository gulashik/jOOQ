/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.tables.Employee
import jooq.generated.tables.interfaces.IEmployee

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class EmployeeRecord private constructor() : UpdatableRecordImpl<EmployeeRecord>(Employee.EMPLOYEE), IEmployee {

    @get:NotNull
    open override var employeeNumber: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    @get:NotNull
    @get:Size(max = 50)
    open override var lastName: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    @get:NotNull
    @get:Size(max = 50)
    open override var firstName: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    @get:NotNull
    @get:Size(max = 10)
    open override var extension: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    @get:NotNull
    @get:Size(max = 100)
    open override var email: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    @get:NotNull
    @get:Size(max = 10)
    open override var officeCode: String
        set(value): Unit = set(5, value)
        get(): String = get(5) as String

    @get:NotNull
    open override var salary: Int
        set(value): Unit = set(6, value)
        get(): Int = get(6) as Int

    open override var commission: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open override var reportsTo: Long?
        set(value): Unit = set(8, value)
        get(): Long? = get(8) as Long?

    @get:NotNull
    @get:Size(max = 50)
    open override var jobTitle: String
        set(value): Unit = set(9, value)
        get(): String = get(9) as String

    open override var employeeOfYear: Array<Int?>?
        set(value): Unit = set(10, value)
        get(): Array<Int?>? = get(10) as Array<Int?>?

    open override var monthlyBonus: Array<Int?>?
        set(value): Unit = set(11, value)
        get(): Array<Int?>? = get(11) as Array<Int?>?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IEmployee) {
        this.employeeNumber = from.employeeNumber
        this.lastName = from.lastName
        this.firstName = from.firstName
        this.extension = from.extension
        this.email = from.email
        this.officeCode = from.officeCode
        this.salary = from.salary
        this.commission = from.commission
        this.reportsTo = from.reportsTo
        this.jobTitle = from.jobTitle
        this.employeeOfYear = from.employeeOfYear
        this.monthlyBonus = from.monthlyBonus
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EmployeeRecord
     */
    constructor(employeeNumber: Long, lastName: String, firstName: String, extension: String, email: String, officeCode: String, salary: Int, commission: Int? = null, reportsTo: Long? = null, jobTitle: String, employeeOfYear: Array<Int?>? = null, monthlyBonus: Array<Int?>? = null): this() {
        this.employeeNumber = employeeNumber
        this.lastName = lastName
        this.firstName = firstName
        this.extension = extension
        this.email = email
        this.officeCode = officeCode
        this.salary = salary
        this.commission = commission
        this.reportsTo = reportsTo
        this.jobTitle = jobTitle
        this.employeeOfYear = employeeOfYear
        this.monthlyBonus = monthlyBonus
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EmployeeRecord
     */
    constructor(value: jooq.generated.tables.pojos.Employee?): this() {
        if (value != null) {
            this.employeeNumber = value.employeeNumber
            this.lastName = value.lastName
            this.firstName = value.firstName
            this.extension = value.extension
            this.email = value.email
            this.officeCode = value.officeCode
            this.salary = value.salary
            this.commission = value.commission
            this.reportsTo = value.reportsTo
            this.jobTitle = value.jobTitle
            this.employeeOfYear = value.employeeOfYear
            this.monthlyBonus = value.monthlyBonus
            resetChangedOnNotNull()
        }
    }
}
