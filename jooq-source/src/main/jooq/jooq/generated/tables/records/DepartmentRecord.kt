/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.tables.Department
import jooq.generated.tables.interfaces.IDepartment

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class DepartmentRecord private constructor() : UpdatableRecordImpl<DepartmentRecord>(Department.DEPARTMENT), IDepartment {

    open override var departmentId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    @get:NotNull
    @get:Size(max = 50)
    open override var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    @get:NotNull
    @get:Size(max = 50)
    open override var phone: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    @get:NotNull
    open override var code: Int
        set(value): Unit = set(3, value)
        get(): Int = get(3) as Int

    @get:NotNull
    @get:Size(max = 10)
    open override var officeCode: String
        set(value): Unit = set(4, value)
        get(): String = get(4) as String

    open override var topic: Array<String?>?
        set(value): Unit = set(5, value)
        get(): Array<String?>? = get(5) as Array<String?>?

    open override var depNetIpv4: Any?
        set(value): Unit = set(6, value)
        get(): Any? = get(6) as Any?

    open override var localBudget: Double?
        set(value): Unit = set(7, value)
        get(): Double? = get(7) as Double?

    open override var profit: Double?
        set(value): Unit = set(8, value)
        get(): Double? = get(8) as Double?

    open override var forecastProfit: Double?
        set(value): Unit = set(9, value)
        get(): Double? = get(9) as Double?

    open override var cash: Double?
        set(value): Unit = set(10, value)
        get(): Double? = get(10) as Double?

    open override var accountsReceivable: Double?
        set(value): Unit = set(11, value)
        get(): Double? = get(11) as Double?

    open override var inventories: Double?
        set(value): Unit = set(12, value)
        get(): Double? = get(12) as Double?

    open override var accountsPayable: Double?
        set(value): Unit = set(13, value)
        get(): Double? = get(13) as Double?

    open override var stBorrowing: Double?
        set(value): Unit = set(14, value)
        get(): Double? = get(14) as Double?

    open override var accruedLiabilities: Double?
        set(value): Unit = set(15, value)
        get(): Double? = get(15) as Double?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IDepartment) {
        this.departmentId = from.departmentId
        this.name = from.name
        this.phone = from.phone
        this.code = from.code
        this.officeCode = from.officeCode
        this.topic = from.topic
        this.depNetIpv4 = from.depNetIpv4
        this.localBudget = from.localBudget
        this.profit = from.profit
        this.forecastProfit = from.forecastProfit
        this.cash = from.cash
        this.accountsReceivable = from.accountsReceivable
        this.inventories = from.inventories
        this.accountsPayable = from.accountsPayable
        this.stBorrowing = from.stBorrowing
        this.accruedLiabilities = from.accruedLiabilities
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DepartmentRecord
     */
    constructor(departmentId: Int? = null, name: String, phone: String, code: Int, officeCode: String, topic: Array<String?>? = null, depNetIpv4: Any? = null, localBudget: Double? = null, profit: Double? = null, forecastProfit: Double? = null, cash: Double? = null, accountsReceivable: Double? = null, inventories: Double? = null, accountsPayable: Double? = null, stBorrowing: Double? = null, accruedLiabilities: Double? = null): this() {
        this.departmentId = departmentId
        this.name = name
        this.phone = phone
        this.code = code
        this.officeCode = officeCode
        this.topic = topic
        this.depNetIpv4 = depNetIpv4
        this.localBudget = localBudget
        this.profit = profit
        this.forecastProfit = forecastProfit
        this.cash = cash
        this.accountsReceivable = accountsReceivable
        this.inventories = inventories
        this.accountsPayable = accountsPayable
        this.stBorrowing = stBorrowing
        this.accruedLiabilities = accruedLiabilities
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DepartmentRecord
     */
    constructor(value: jooq.generated.tables.pojos.Department?): this() {
        if (value != null) {
            this.departmentId = value.departmentId
            this.name = value.name
            this.phone = value.phone
            this.code = value.code
            this.officeCode = value.officeCode
            this.topic = value.topic
            this.depNetIpv4 = value.depNetIpv4
            this.localBudget = value.localBudget
            this.profit = value.profit
            this.forecastProfit = value.forecastProfit
            this.cash = value.cash
            this.accountsReceivable = value.accountsReceivable
            this.inventories = value.inventories
            this.accountsPayable = value.accountsPayable
            this.stBorrowing = value.stBorrowing
            this.accruedLiabilities = value.accruedLiabilities
            resetChangedOnNotNull()
        }
    }
}
