/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.Author
import jooq.generated.tables.interfaces.IAuthor

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class AuthorRecord private constructor() : UpdatableRecordImpl<AuthorRecord>(Author.AUTHOR), IAuthor {

    @get:NotNull
    open override var id: Int
        set(value): Unit = set(0, value)
        get(): Int = get(0) as Int

    @get:Size(max = 50)
    open override var firstName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:NotNull
    @get:Size(max = 50)
    open override var lastName: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open override var dateOfBirth: LocalDate?
        set(value): Unit = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    open override var yearOfBirth: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open override var distinguished: Byte?
        set(value): Unit = set(5, value)
        get(): Byte? = get(5) as Byte?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IAuthor) {
        this.id = from.id
        this.firstName = from.firstName
        this.lastName = from.lastName
        this.dateOfBirth = from.dateOfBirth
        this.yearOfBirth = from.yearOfBirth
        this.distinguished = from.distinguished
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    constructor(id: Int, firstName: String? = null, lastName: String, dateOfBirth: LocalDate? = null, yearOfBirth: Int? = null, distinguished: Byte? = null): this() {
        this.id = id
        this.firstName = firstName
        this.lastName = lastName
        this.dateOfBirth = dateOfBirth
        this.yearOfBirth = yearOfBirth
        this.distinguished = distinguished
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised AuthorRecord
     */
    constructor(value: jooq.generated.tables.pojos.Author?): this() {
        if (value != null) {
            this.id = value.id
            this.firstName = value.firstName
            this.lastName = value.lastName
            this.dateOfBirth = value.dateOfBirth
            this.yearOfBirth = value.yearOfBirth
            this.distinguished = value.distinguished
            resetChangedOnNotNull()
        }
    }
}
