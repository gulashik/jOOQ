/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.tables.Book
import jooq.generated.tables.interfaces.IBook

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BookRecord private constructor() : UpdatableRecordImpl<BookRecord>(Book.BOOK), IBook {

    @get:NotNull
    open override var id: Int
        set(value): Unit = set(0, value)
        get(): Int = get(0) as Int

    @get:NotNull
    open override var authorId: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    @get:NotNull
    @get:Size(max = 400)
    open override var title: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    @get:NotNull
    open override var publishedIn: Int
        set(value): Unit = set(3, value)
        get(): Int = get(3) as Int

    @get:NotNull
    open override var languageId: Int
        set(value): Unit = set(4, value)
        get(): Int = get(4) as Int

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IBook) {
        this.id = from.id
        this.authorId = from.authorId
        this.title = from.title
        this.publishedIn = from.publishedIn
        this.languageId = from.languageId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookRecord
     */
    constructor(id: Int, authorId: Int, title: String, publishedIn: Int, languageId: Int): this() {
        this.id = id
        this.authorId = authorId
        this.title = title
        this.publishedIn = publishedIn
        this.languageId = languageId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BookRecord
     */
    constructor(value: jooq.generated.tables.pojos.Book?): this() {
        if (value != null) {
            this.id = value.id
            this.authorId = value.authorId
            this.title = value.title
            this.publishedIn = value.publishedIn
            this.languageId = value.languageId
            resetChangedOnNotNull()
        }
    }
}
