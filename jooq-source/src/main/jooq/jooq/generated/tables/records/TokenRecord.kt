/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull

import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.tables.Token
import jooq.generated.tables.interfaces.IToken

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class TokenRecord private constructor() : UpdatableRecordImpl<TokenRecord>(Token.TOKEN), IToken {

    open override var tokenId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:NotNull
    open override var saleId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    @get:NotNull
    open override var amount: Double
        set(value): Unit = set(2, value)
        get(): Double = get(2) as Double

    open override var updatedOn: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IToken) {
        this.tokenId = from.tokenId
        this.saleId = from.saleId
        this.amount = from.amount
        this.updatedOn = from.updatedOn
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised TokenRecord
     */
    constructor(tokenId: Long? = null, saleId: Long, amount: Double, updatedOn: LocalDateTime? = null): this() {
        this.tokenId = tokenId
        this.saleId = saleId
        this.amount = amount
        this.updatedOn = updatedOn
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised TokenRecord
     */
    constructor(value: jooq.generated.tables.pojos.Token?): this() {
        if (value != null) {
            this.tokenId = value.tokenId
            this.saleId = value.saleId
            this.amount = value.amount
            this.updatedOn = value.updatedOn
            resetChangedOnNotNull()
        }
    }
}
