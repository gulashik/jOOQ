/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import javax.annotation.processing.Generated

import jooq.generated.tables.GetOfficesMultiple
import jooq.generated.tables.interfaces.IGetOfficesMultiple

import org.jooq.Record
import org.jooq.Result
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class GetOfficesMultipleRecord private constructor() : TableRecordImpl<GetOfficesMultipleRecord>(GetOfficesMultiple.GET_OFFICES_MULTIPLE), IGetOfficesMultiple {

    open override var getOfficesMultiple: Result<Record>?
        set(value): Unit = set(0, value)
        get(): Result<Record>? = get(0) as Result<Record>?

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IGetOfficesMultiple) {
        this.getOfficesMultiple = from.getOfficesMultiple
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GetOfficesMultipleRecord
     */
    constructor(getOfficesMultiple: Result<Record>? = null): this() {
        this.getOfficesMultiple = getOfficesMultiple
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised GetOfficesMultipleRecord
     */
    constructor(value: jooq.generated.tables.pojos.GetOfficesMultiple?): this() {
        if (value != null) {
            this.getOfficesMultiple = value.getOfficesMultiple
            resetChangedOnNotNull()
        }
    }
}
