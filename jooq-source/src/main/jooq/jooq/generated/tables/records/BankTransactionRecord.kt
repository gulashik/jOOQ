/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal
import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.tables.BankTransaction
import jooq.generated.tables.interfaces.IBankTransaction

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BankTransactionRecord private constructor() : UpdatableRecordImpl<BankTransactionRecord>(BankTransaction.BANK_TRANSACTION), IBankTransaction {

    open override var transactionId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    @get:NotNull
    @get:Size(max = 50)
    open override var bankName: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    @get:NotNull
    @get:Size(max = 50)
    open override var bankIban: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    @get:NotNull
    open override var transferAmount: BigDecimal
        set(value): Unit = set(3, value)
        get(): BigDecimal = get(3) as BigDecimal

    open override var cachingDate: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    @get:NotNull
    open override var customerNumber: Long
        set(value): Unit = set(5, value)
        get(): Long = get(5) as Long

    @get:NotNull
    @get:Size(max = 50)
    open override var checkNumber: String
        set(value): Unit = set(6, value)
        get(): String = get(6) as String

    @get:NotNull
    @get:Size(max = 50)
    open override var cardType: String
        set(value): Unit = set(7, value)
        get(): String = get(7) as String

    @get:Size(max = 50)
    open override var status: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IBankTransaction) {
        this.transactionId = from.transactionId
        this.bankName = from.bankName
        this.bankIban = from.bankIban
        this.transferAmount = from.transferAmount
        this.cachingDate = from.cachingDate
        this.customerNumber = from.customerNumber
        this.checkNumber = from.checkNumber
        this.cardType = from.cardType
        this.status = from.status
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BankTransactionRecord
     */
    constructor(transactionId: Int? = null, bankName: String, bankIban: String, transferAmount: BigDecimal, cachingDate: LocalDateTime? = null, customerNumber: Long, checkNumber: String, cardType: String, status: String? = null): this() {
        this.transactionId = transactionId
        this.bankName = bankName
        this.bankIban = bankIban
        this.transferAmount = transferAmount
        this.cachingDate = cachingDate
        this.customerNumber = customerNumber
        this.checkNumber = checkNumber
        this.cardType = cardType
        this.status = status
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised BankTransactionRecord
     */
    constructor(value: jooq.generated.tables.pojos.BankTransaction?): this() {
        if (value != null) {
            this.transactionId = value.transactionId
            this.bankName = value.bankName
            this.bankIban = value.bankIban
            this.transferAmount = value.transferAmount
            this.cachingDate = value.cachingDate
            this.customerNumber = value.customerNumber
            this.checkNumber = value.checkNumber
            this.cardType = value.cardType
            this.status = value.status
            resetChangedOnNotNull()
        }
    }
}
