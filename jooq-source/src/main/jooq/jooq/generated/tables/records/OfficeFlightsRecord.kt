/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import javax.annotation.processing.Generated

import jooq.generated.tables.OfficeFlights
import jooq.generated.tables.interfaces.IOfficeFlights

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class OfficeFlightsRecord private constructor() : UpdatableRecordImpl<OfficeFlightsRecord>(OfficeFlights.OFFICE_FLIGHTS), IOfficeFlights {

    @get:NotNull
    @get:Size(max = 32)
    open override var departTown: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    @get:NotNull
    @get:Size(max = 32)
    open override var arrivalTown: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    @get:NotNull
    open override var distanceKm: Int
        set(value): Unit = set(2, value)
        get(): Int = get(2) as Int

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, String?> = super.key() as Record2<String?, String?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IOfficeFlights) {
        this.departTown = from.departTown
        this.arrivalTown = from.arrivalTown
        this.distanceKm = from.distanceKm
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised OfficeFlightsRecord
     */
    constructor(departTown: String, arrivalTown: String, distanceKm: Int): this() {
        this.departTown = departTown
        this.arrivalTown = arrivalTown
        this.distanceKm = distanceKm
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised OfficeFlightsRecord
     */
    constructor(value: jooq.generated.tables.pojos.OfficeFlights?): this() {
        if (value != null) {
            this.departTown = value.departTown
            this.arrivalTown = value.arrivalTown
            this.distanceKm = value.distanceKm
            resetChangedOnNotNull()
        }
    }
}
