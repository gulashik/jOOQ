/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.tables.Product
import jooq.generated.tables.interfaces.IProduct

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class ProductRecord private constructor() : UpdatableRecordImpl<ProductRecord>(Product.PRODUCT), IProduct {

    open override var productId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Size(max = 70)
    open override var productName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:Size(max = 50)
    open override var productLine: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    @get:NotNull
    open override var code: Long
        set(value): Unit = set(3, value)
        get(): Long = get(3) as Long

    @get:Size(max = 10)
    open override var productScale: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    @get:Size(max = 50)
    open override var productVendor: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open override var productDescription: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open override var quantityInStock: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open override var buyPrice: BigDecimal?
        set(value): Unit = set(8, value)
        get(): BigDecimal? = get(8) as BigDecimal?

    open override var msrp: BigDecimal?
        set(value): Unit = set(9, value)
        get(): BigDecimal? = get(9) as BigDecimal?

    open override var specs: Any?
        set(value): Unit = set(10, value)
        get(): Any? = get(10) as Any?

    open override var productUid: Long?
        set(value): Unit = set(11, value)
        get(): Long? = get(11) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IProduct) {
        this.productId = from.productId
        this.productName = from.productName
        this.productLine = from.productLine
        this.code = from.code
        this.productScale = from.productScale
        this.productVendor = from.productVendor
        this.productDescription = from.productDescription
        this.quantityInStock = from.quantityInStock
        this.buyPrice = from.buyPrice
        this.msrp = from.msrp
        this.specs = from.specs
        this.productUid = from.productUid
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    constructor(productId: Long? = null, productName: String? = null, productLine: String? = null, code: Long, productScale: String? = null, productVendor: String? = null, productDescription: String? = null, quantityInStock: Int? = null, buyPrice: BigDecimal? = null, msrp: BigDecimal? = null, specs: Any? = null, productUid: Long? = null): this() {
        this.productId = productId
        this.productName = productName
        this.productLine = productLine
        this.code = code
        this.productScale = productScale
        this.productVendor = productVendor
        this.productDescription = productDescription
        this.quantityInStock = quantityInStock
        this.buyPrice = buyPrice
        this.msrp = msrp
        this.specs = specs
        this.productUid = productUid
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ProductRecord
     */
    constructor(value: jooq.generated.tables.pojos.Product?): this() {
        if (value != null) {
            this.productId = value.productId
            this.productName = value.productName
            this.productLine = value.productLine
            this.code = value.code
            this.productScale = value.productScale
            this.productVendor = value.productVendor
            this.productDescription = value.productDescription
            this.quantityInStock = value.quantityInStock
            this.buyPrice = value.buyPrice
            this.msrp = value.msrp
            this.specs = value.specs
            this.productUid = value.productUid
            resetChangedOnNotNull()
        }
    }
}
