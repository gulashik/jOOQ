/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.EmployeeStatus
import jooq.generated.tables.interfaces.IEmployeeStatus

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class EmployeeStatusRecord private constructor() : UpdatableRecordImpl<EmployeeStatusRecord>(EmployeeStatus.EMPLOYEE_STATUS), IEmployeeStatus {

    open override var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    @get:NotNull
    open override var employeeNumber: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    @get:NotNull
    @get:Size(max = 50)
    open override var status: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    @get:NotNull
    open override var acquiredDate: LocalDate
        set(value): Unit = set(3, value)
        get(): LocalDate = get(3) as LocalDate

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IEmployeeStatus) {
        this.id = from.id
        this.employeeNumber = from.employeeNumber
        this.status = from.status
        this.acquiredDate = from.acquiredDate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EmployeeStatusRecord
     */
    constructor(id: Int? = null, employeeNumber: Long, status: String, acquiredDate: LocalDate): this() {
        this.id = id
        this.employeeNumber = employeeNumber
        this.status = status
        this.acquiredDate = acquiredDate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EmployeeStatusRecord
     */
    constructor(value: jooq.generated.tables.pojos.EmployeeStatus?): this() {
        if (value != null) {
            this.id = value.id
            this.employeeNumber = value.employeeNumber
            this.status = value.status
            this.acquiredDate = value.acquiredDate
            resetChangedOnNotNull()
        }
    }
}
