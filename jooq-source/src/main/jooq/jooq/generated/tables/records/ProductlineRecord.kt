/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.Productline
import jooq.generated.tables.interfaces.IProductline

import org.jooq.Record2
import org.jooq.XML
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class ProductlineRecord private constructor() : UpdatableRecordImpl<ProductlineRecord>(Productline.PRODUCTLINE), IProductline {

    @get:NotNull
    @get:Size(max = 50)
    open override var productLine: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    @get:NotNull
    open override var code: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    @get:Size(max = 4000)
    open override var textDescription: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open override var htmlDescription: XML?
        set(value): Unit = set(3, value)
        get(): XML? = get(3) as XML?

    open override var image: ByteArray?
        set(value): Unit = set(4, value)
        get(): ByteArray? = get(4) as ByteArray?

    open override var createdOn: LocalDate?
        set(value): Unit = set(5, value)
        get(): LocalDate? = get(5) as LocalDate?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, Long?> = super.key() as Record2<String?, Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    fun from(from: IProductline) {
        this.productLine = from.productLine
        this.code = from.code
        this.textDescription = from.textDescription
        this.htmlDescription = from.htmlDescription
        this.image = from.image
        this.createdOn = from.createdOn
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ProductlineRecord
     */
    constructor(productLine: String, code: Long, textDescription: String? = null, htmlDescription: XML? = null, image: ByteArray? = null, createdOn: LocalDate? = null): this() {
        this.productLine = productLine
        this.code = code
        this.textDescription = textDescription
        this.htmlDescription = htmlDescription
        this.image = image
        this.createdOn = createdOn
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised ProductlineRecord
     */
    constructor(value: jooq.generated.tables.pojos.Productline?): this() {
        if (value != null) {
            this.productLine = value.productLine
            this.code = value.code
            this.textDescription = value.textDescription
            this.htmlDescription = value.htmlDescription
            this.image = value.image
            this.createdOn = value.createdOn
            resetChangedOnNotNull()
        }
    }
}
