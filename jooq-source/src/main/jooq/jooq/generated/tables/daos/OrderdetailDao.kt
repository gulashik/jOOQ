/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.tables.Orderdetail
import jooq.generated.tables.records.OrderdetailRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class OrderdetailDao(configuration: Configuration?) : DAOImpl<OrderdetailRecord, jooq.generated.tables.pojos.Orderdetail, Int>(Orderdetail.ORDERDETAIL, jooq.generated.tables.pojos.Orderdetail::class.java, configuration) {

    /**
     * Create a new OrderdetailDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Orderdetail): Int? = o.orderdetailId

    /**
     * Fetch records that have <code>orderdetail_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOrderdetailId(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.generated.tables.pojos.Orderdetail> = fetchRange(Orderdetail.ORDERDETAIL.ORDERDETAIL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>orderdetail_id IN (values)</code>
     */
    fun fetchByOrderdetailId(vararg values: Int): List<jooq.generated.tables.pojos.Orderdetail> = fetch(Orderdetail.ORDERDETAIL.ORDERDETAIL_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>orderdetail_id = value</code>
     */
    fun fetchOneByOrderdetailId(value: Int): jooq.generated.tables.pojos.Orderdetail? = fetchOne(Orderdetail.ORDERDETAIL.ORDERDETAIL_ID, value)

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOrderId(lowerInclusive: Long, upperInclusive: Long): List<jooq.generated.tables.pojos.Orderdetail> = fetchRange(Orderdetail.ORDERDETAIL.ORDER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    fun fetchByOrderId(vararg values: Long): List<jooq.generated.tables.pojos.Orderdetail> = fetch(Orderdetail.ORDERDETAIL.ORDER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProductId(lowerInclusive: Long, upperInclusive: Long): List<jooq.generated.tables.pojos.Orderdetail> = fetchRange(Orderdetail.ORDERDETAIL.PRODUCT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    fun fetchByProductId(vararg values: Long): List<jooq.generated.tables.pojos.Orderdetail> = fetch(Orderdetail.ORDERDETAIL.PRODUCT_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>quantity_ordered BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfQuantityOrdered(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Orderdetail> = fetchRange(Orderdetail.ORDERDETAIL.QUANTITY_ORDERED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>quantity_ordered IN (values)</code>
     */
    fun fetchByQuantityOrdered(vararg values: Int): List<jooq.generated.tables.pojos.Orderdetail> = fetch(Orderdetail.ORDERDETAIL.QUANTITY_ORDERED, *values.toTypedArray())

    /**
     * Fetch records that have <code>price_each BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPriceEach(lowerInclusive: BigDecimal, upperInclusive: BigDecimal): List<jooq.generated.tables.pojos.Orderdetail> = fetchRange(Orderdetail.ORDERDETAIL.PRICE_EACH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>price_each IN (values)</code>
     */
    fun fetchByPriceEach(vararg values: BigDecimal): List<jooq.generated.tables.pojos.Orderdetail> = fetch(Orderdetail.ORDERDETAIL.PRICE_EACH, *values)

    /**
     * Fetch records that have <code>order_line_number BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfOrderLineNumber(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Orderdetail> = fetchRange(Orderdetail.ORDERDETAIL.ORDER_LINE_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_line_number IN (values)</code>
     */
    fun fetchByOrderLineNumber(vararg values: Int): List<jooq.generated.tables.pojos.Orderdetail> = fetch(Orderdetail.ORDERDETAIL.ORDER_LINE_NUMBER, *values.toTypedArray())
}
