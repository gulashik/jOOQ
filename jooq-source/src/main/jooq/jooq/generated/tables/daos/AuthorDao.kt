/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.Author
import jooq.generated.tables.records.AuthorRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class AuthorDao(configuration: Configuration?) : DAOImpl<AuthorRecord, jooq.generated.tables.pojos.Author, Int>(Author.AUTHOR, jooq.generated.tables.pojos.Author::class.java, configuration) {

    /**
     * Create a new AuthorDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Author): Int = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Author> = fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Int): List<jooq.generated.tables.pojos.Author> = fetch(Author.AUTHOR.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Int): jooq.generated.tables.pojos.Author? = fetchOne(Author.AUTHOR.ID, value)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Author> = fetchRange(Author.AUTHOR.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<jooq.generated.tables.pojos.Author> = fetch(Author.AUTHOR.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Author> = fetchRange(Author.AUTHOR.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<jooq.generated.tables.pojos.Author> = fetch(Author.AUTHOR.LAST_NAME, *values)

    /**
     * Fetch records that have <code>date_of_birth BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDateOfBirth(lowerInclusive: LocalDate?, upperInclusive: LocalDate?): List<jooq.generated.tables.pojos.Author> = fetchRange(Author.AUTHOR.DATE_OF_BIRTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>date_of_birth IN (values)</code>
     */
    fun fetchByDateOfBirth(vararg values: LocalDate): List<jooq.generated.tables.pojos.Author> = fetch(Author.AUTHOR.DATE_OF_BIRTH, *values)

    /**
     * Fetch records that have <code>year_of_birth BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfYearOfBirth(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.generated.tables.pojos.Author> = fetchRange(Author.AUTHOR.YEAR_OF_BIRTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>year_of_birth IN (values)</code>
     */
    fun fetchByYearOfBirth(vararg values: Int): List<jooq.generated.tables.pojos.Author> = fetch(Author.AUTHOR.YEAR_OF_BIRTH, *values.toTypedArray())

    /**
     * Fetch records that have <code>distinguished BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDistinguished(lowerInclusive: Byte?, upperInclusive: Byte?): List<jooq.generated.tables.pojos.Author> = fetchRange(Author.AUTHOR.DISTINGUISHED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>distinguished IN (values)</code>
     */
    fun fetchByDistinguished(vararg values: Byte): List<jooq.generated.tables.pojos.Author> = fetch(Author.AUTHOR.DISTINGUISHED, *values.toTypedArray())
}
