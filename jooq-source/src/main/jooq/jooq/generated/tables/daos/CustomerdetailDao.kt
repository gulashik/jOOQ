/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import javax.annotation.processing.Generated

import jooq.generated.tables.Customerdetail
import jooq.generated.tables.records.CustomerdetailRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class CustomerdetailDao(configuration: Configuration?) : DAOImpl<CustomerdetailRecord, jooq.generated.tables.pojos.Customerdetail, Long>(Customerdetail.CUSTOMERDETAIL, jooq.generated.tables.pojos.Customerdetail::class.java, configuration) {

    /**
     * Create a new CustomerdetailDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Customerdetail): Long = o.customerNumber

    /**
     * Fetch records that have <code>customer_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCustomerNumber(lowerInclusive: Long, upperInclusive: Long): List<jooq.generated.tables.pojos.Customerdetail> = fetchRange(Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_number IN (values)</code>
     */
    fun fetchByCustomerNumber(vararg values: Long): List<jooq.generated.tables.pojos.Customerdetail> = fetch(Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>customer_number = value</code>
     */
    fun fetchOneByCustomerNumber(value: Long): jooq.generated.tables.pojos.Customerdetail? = fetchOne(Customerdetail.CUSTOMERDETAIL.CUSTOMER_NUMBER, value)

    /**
     * Fetch records that have <code>address_line_first BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfAddressLineFirst(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Customerdetail> = fetchRange(Customerdetail.CUSTOMERDETAIL.ADDRESS_LINE_FIRST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_line_first IN (values)</code>
     */
    fun fetchByAddressLineFirst(vararg values: String): List<jooq.generated.tables.pojos.Customerdetail> = fetch(Customerdetail.CUSTOMERDETAIL.ADDRESS_LINE_FIRST, *values)

    /**
     * Fetch a unique record that has <code>address_line_first = value</code>
     */
    fun fetchOneByAddressLineFirst(value: String): jooq.generated.tables.pojos.Customerdetail? = fetchOne(Customerdetail.CUSTOMERDETAIL.ADDRESS_LINE_FIRST, value)

    /**
     * Fetch records that have <code>address_line_second BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfAddressLineSecond(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Customerdetail> = fetchRange(Customerdetail.CUSTOMERDETAIL.ADDRESS_LINE_SECOND, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_line_second IN (values)</code>
     */
    fun fetchByAddressLineSecond(vararg values: String): List<jooq.generated.tables.pojos.Customerdetail> = fetch(Customerdetail.CUSTOMERDETAIL.ADDRESS_LINE_SECOND, *values)

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCity(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Customerdetail> = fetchRange(Customerdetail.CUSTOMERDETAIL.CITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    fun fetchByCity(vararg values: String): List<jooq.generated.tables.pojos.Customerdetail> = fetch(Customerdetail.CUSTOMERDETAIL.CITY, *values)

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfState(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Customerdetail> = fetchRange(Customerdetail.CUSTOMERDETAIL.STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    fun fetchByState(vararg values: String): List<jooq.generated.tables.pojos.Customerdetail> = fetch(Customerdetail.CUSTOMERDETAIL.STATE, *values)

    /**
     * Fetch records that have <code>postal_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPostalCode(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Customerdetail> = fetchRange(Customerdetail.CUSTOMERDETAIL.POSTAL_CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>postal_code IN (values)</code>
     */
    fun fetchByPostalCode(vararg values: String): List<jooq.generated.tables.pojos.Customerdetail> = fetch(Customerdetail.CUSTOMERDETAIL.POSTAL_CODE, *values)

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCountry(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Customerdetail> = fetchRange(Customerdetail.CUSTOMERDETAIL.COUNTRY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    fun fetchByCountry(vararg values: String): List<jooq.generated.tables.pojos.Customerdetail> = fetch(Customerdetail.CUSTOMERDETAIL.COUNTRY, *values)
}
