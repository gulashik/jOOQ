/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import javax.annotation.processing.Generated

import jooq.generated.enums.RateType
import jooq.generated.enums.VatType
import jooq.generated.tables.Sale
import jooq.generated.tables.records.SaleRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class SaleDao(configuration: Configuration?) : DAOImpl<SaleRecord, jooq.generated.tables.pojos.Sale, Long>(Sale.SALE, jooq.generated.tables.pojos.Sale::class.java, configuration) {

    /**
     * Create a new SaleDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Sale): Long? = o.saleId

    /**
     * Fetch records that have <code>sale_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSaleId(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.SALE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sale_id IN (values)</code>
     */
    fun fetchBySaleId(vararg values: Long): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.SALE_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>sale_id = value</code>
     */
    fun fetchOneBySaleId(value: Long): jooq.generated.tables.pojos.Sale? = fetchOne(Sale.SALE.SALE_ID, value)

    /**
     * Fetch records that have <code>fiscal_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFiscalYear(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.FISCAL_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>fiscal_year IN (values)</code>
     */
    fun fetchByFiscalYear(vararg values: Int): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.FISCAL_YEAR, *values.toTypedArray())

    /**
     * Fetch records that have <code>sale BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSale(lowerInclusive: Double, upperInclusive: Double): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.SALE_, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sale IN (values)</code>
     */
    fun fetchBySale(vararg values: Double): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.SALE_, *values.toTypedArray())

    /**
     * Fetch records that have <code>employee_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmployeeNumber(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.EMPLOYEE_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>employee_number IN (values)</code>
     */
    fun fetchByEmployeeNumber(vararg values: Long): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.EMPLOYEE_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>hot BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfHot(lowerInclusive: Boolean?, upperInclusive: Boolean?): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.HOT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>hot IN (values)</code>
     */
    fun fetchByHot(vararg values: Boolean): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.HOT, *values.toTypedArray())

    /**
     * Fetch records that have <code>rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRate(lowerInclusive: RateType?, upperInclusive: RateType?): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.RATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rate IN (values)</code>
     */
    fun fetchByRate(vararg values: RateType): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.RATE, *values)

    /**
     * Fetch records that have <code>vat BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVat(lowerInclusive: VatType?, upperInclusive: VatType?): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.VAT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>vat IN (values)</code>
     */
    fun fetchByVat(vararg values: VatType): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.VAT, *values)

    /**
     * Fetch records that have <code>fiscal_month BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFiscalMonth(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.FISCAL_MONTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>fiscal_month IN (values)</code>
     */
    fun fetchByFiscalMonth(vararg values: Int): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.FISCAL_MONTH, *values.toTypedArray())

    /**
     * Fetch records that have <code>revenue_growth BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRevenueGrowth(lowerInclusive: Double, upperInclusive: Double): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.REVENUE_GROWTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>revenue_growth IN (values)</code>
     */
    fun fetchByRevenueGrowth(vararg values: Double): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.REVENUE_GROWTH, *values.toTypedArray())

    /**
     * Fetch records that have <code>trend BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTrend(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Sale> = fetchRange(Sale.SALE.TREND, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>trend IN (values)</code>
     */
    fun fetchByTrend(vararg values: String): List<jooq.generated.tables.pojos.Sale> = fetch(Sale.SALE.TREND, *values)
}
