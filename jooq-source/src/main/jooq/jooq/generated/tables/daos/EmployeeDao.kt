/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import javax.annotation.processing.Generated

import jooq.generated.tables.Employee
import jooq.generated.tables.records.EmployeeRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class EmployeeDao(configuration: Configuration?) : DAOImpl<EmployeeRecord, jooq.generated.tables.pojos.Employee, Long>(Employee.EMPLOYEE, jooq.generated.tables.pojos.Employee::class.java, configuration) {

    /**
     * Create a new EmployeeDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Employee): Long = o.employeeNumber

    /**
     * Fetch records that have <code>employee_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmployeeNumber(lowerInclusive: Long, upperInclusive: Long): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.EMPLOYEE_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>employee_number IN (values)</code>
     */
    fun fetchByEmployeeNumber(vararg values: Long): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.EMPLOYEE_NUMBER, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>employee_number = value</code>
     */
    fun fetchOneByEmployeeNumber(value: Long): jooq.generated.tables.pojos.Employee? = fetchOne(Employee.EMPLOYEE.EMPLOYEE_NUMBER, value)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.LAST_NAME, *values)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>extension BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfExtension(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.EXTENSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>extension IN (values)</code>
     */
    fun fetchByExtension(vararg values: String): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.EXTENSION, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.EMAIL, *values)

    /**
     * Fetch records that have <code>office_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOfficeCode(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.OFFICE_CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>office_code IN (values)</code>
     */
    fun fetchByOfficeCode(vararg values: String): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.OFFICE_CODE, *values)

    /**
     * Fetch records that have <code>salary BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSalary(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.SALARY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>salary IN (values)</code>
     */
    fun fetchBySalary(vararg values: Int): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.SALARY, *values.toTypedArray())

    /**
     * Fetch records that have <code>commission BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCommission(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.COMMISSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>commission IN (values)</code>
     */
    fun fetchByCommission(vararg values: Int): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.COMMISSION, *values.toTypedArray())

    /**
     * Fetch records that have <code>reports_to BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfReportsTo(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.REPORTS_TO, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>reports_to IN (values)</code>
     */
    fun fetchByReportsTo(vararg values: Long): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.REPORTS_TO, *values.toTypedArray())

    /**
     * Fetch records that have <code>job_title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJobTitle(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.JOB_TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>job_title IN (values)</code>
     */
    fun fetchByJobTitle(vararg values: String): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.JOB_TITLE, *values)

    /**
     * Fetch records that have <code>employee_of_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmployeeOfYear(lowerInclusive: Array<Int?>?, upperInclusive: Array<Int?>?): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.EMPLOYEE_OF_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>employee_of_year IN (values)</code>
     */
    fun fetchByEmployeeOfYear(vararg values: Array<Int?>): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.EMPLOYEE_OF_YEAR, *values)

    /**
     * Fetch records that have <code>monthly_bonus BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfMonthlyBonus(lowerInclusive: Array<Int?>?, upperInclusive: Array<Int?>?): List<jooq.generated.tables.pojos.Employee> = fetchRange(Employee.EMPLOYEE.MONTHLY_BONUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>monthly_bonus IN (values)</code>
     */
    fun fetchByMonthlyBonus(vararg values: Array<Int?>): List<jooq.generated.tables.pojos.Employee> = fetch(Employee.EMPLOYEE.MONTHLY_BONUS, *values)
}
