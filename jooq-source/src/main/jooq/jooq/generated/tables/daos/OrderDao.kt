/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import java.math.BigDecimal
import java.time.LocalDate

import javax.annotation.processing.Generated

import jooq.generated.tables.Order
import jooq.generated.tables.records.OrderRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class OrderDao(configuration: Configuration?) : DAOImpl<OrderRecord, jooq.generated.tables.pojos.Order, Long>(Order.ORDER, jooq.generated.tables.pojos.Order::class.java, configuration) {

    /**
     * Create a new OrderDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Order): Long? = o.orderId

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOrderId(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.ORDER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    fun fetchByOrderId(vararg values: Long): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.ORDER_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>order_id = value</code>
     */
    fun fetchOneByOrderId(value: Long): jooq.generated.tables.pojos.Order? = fetchOne(Order.ORDER.ORDER_ID, value)

    /**
     * Fetch records that have <code>order_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOrderDate(lowerInclusive: LocalDate, upperInclusive: LocalDate): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.ORDER_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_date IN (values)</code>
     */
    fun fetchByOrderDate(vararg values: LocalDate): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.ORDER_DATE, *values)

    /**
     * Fetch records that have <code>required_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRequiredDate(lowerInclusive: LocalDate, upperInclusive: LocalDate): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.REQUIRED_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>required_date IN (values)</code>
     */
    fun fetchByRequiredDate(vararg values: LocalDate): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.REQUIRED_DATE, *values)

    /**
     * Fetch records that have <code>shipped_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfShippedDate(lowerInclusive: LocalDate?, upperInclusive: LocalDate?): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.SHIPPED_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>shipped_date IN (values)</code>
     */
    fun fetchByShippedDate(vararg values: LocalDate): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.SHIPPED_DATE, *values)

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStatus(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatus(vararg values: String): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.STATUS, *values)

    /**
     * Fetch records that have <code>comments BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfComments(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.COMMENTS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>comments IN (values)</code>
     */
    fun fetchByComments(vararg values: String): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.COMMENTS, *values)

    /**
     * Fetch records that have <code>customer_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCustomerNumber(lowerInclusive: Long, upperInclusive: Long): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.CUSTOMER_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_number IN (values)</code>
     */
    fun fetchByCustomerNumber(vararg values: Long): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.CUSTOMER_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAmount(lowerInclusive: BigDecimal, upperInclusive: BigDecimal): List<jooq.generated.tables.pojos.Order> = fetchRange(Order.ORDER.AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    fun fetchByAmount(vararg values: BigDecimal): List<jooq.generated.tables.pojos.Order> = fetch(Order.ORDER.AMOUNT, *values)
}
