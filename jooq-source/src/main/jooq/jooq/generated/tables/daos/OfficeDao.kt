/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import javax.annotation.processing.Generated

import jooq.generated.tables.Office
import jooq.generated.tables.records.OfficeRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class OfficeDao(configuration: Configuration?) : DAOImpl<OfficeRecord, jooq.generated.tables.pojos.Office, String>(Office.OFFICE, jooq.generated.tables.pojos.Office::class.java, configuration) {

    /**
     * Create a new OfficeDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Office): String = o.officeCode

    /**
     * Fetch records that have <code>office_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOfficeCode(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.OFFICE_CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>office_code IN (values)</code>
     */
    fun fetchByOfficeCode(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.OFFICE_CODE, *values)

    /**
     * Fetch a unique record that has <code>office_code = value</code>
     */
    fun fetchOneByOfficeCode(value: String): jooq.generated.tables.pojos.Office? = fetchOne(Office.OFFICE.OFFICE_CODE, value)

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCity(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.CITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    fun fetchByCity(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.CITY, *values)

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPhone(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.PHONE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    fun fetchByPhone(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.PHONE, *values)

    /**
     * Fetch records that have <code>address_line_first BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfAddressLineFirst(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.ADDRESS_LINE_FIRST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_line_first IN (values)</code>
     */
    fun fetchByAddressLineFirst(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.ADDRESS_LINE_FIRST, *values)

    /**
     * Fetch records that have <code>address_line_second BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfAddressLineSecond(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.ADDRESS_LINE_SECOND, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_line_second IN (values)</code>
     */
    fun fetchByAddressLineSecond(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.ADDRESS_LINE_SECOND, *values)

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfState(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    fun fetchByState(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.STATE, *values)

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCountry(lowerInclusive: String?, upperInclusive: String?): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.COUNTRY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    fun fetchByCountry(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.COUNTRY, *values)

    /**
     * Fetch records that have <code>postal_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPostalCode(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.POSTAL_CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>postal_code IN (values)</code>
     */
    fun fetchByPostalCode(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.POSTAL_CODE, *values)

    /**
     * Fetch a unique record that has <code>postal_code = value</code>
     */
    fun fetchOneByPostalCode(value: String): jooq.generated.tables.pojos.Office? = fetchOne(Office.OFFICE.POSTAL_CODE, value)

    /**
     * Fetch records that have <code>territory BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTerritory(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.TERRITORY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>territory IN (values)</code>
     */
    fun fetchByTerritory(vararg values: String): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.TERRITORY, *values)
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun fetchRangeOfLocation(lowerInclusive: Any?, upperInclusive: Any?): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.LOCATION, lowerInclusive, upperInclusive)
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun fetchByLocation(vararg values: Any): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.LOCATION, *values)

    /**
     * Fetch records that have <code>internal_budget BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfInternalBudget(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Office> = fetchRange(Office.OFFICE.INTERNAL_BUDGET, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>internal_budget IN (values)</code>
     */
    fun fetchByInternalBudget(vararg values: Int): List<jooq.generated.tables.pojos.Office> = fetch(Office.OFFICE.INTERNAL_BUDGET, *values.toTypedArray())
}
