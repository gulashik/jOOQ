/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.tables.Token
import jooq.generated.tables.records.TokenRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class TokenDao(configuration: Configuration?) : DAOImpl<TokenRecord, jooq.generated.tables.pojos.Token, Long>(Token.TOKEN, jooq.generated.tables.pojos.Token::class.java, configuration) {

    /**
     * Create a new TokenDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Token): Long? = o.tokenId

    /**
     * Fetch records that have <code>token_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTokenId(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.generated.tables.pojos.Token> = fetchRange(Token.TOKEN.TOKEN_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>token_id IN (values)</code>
     */
    fun fetchByTokenId(vararg values: Long): List<jooq.generated.tables.pojos.Token> = fetch(Token.TOKEN.TOKEN_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>token_id = value</code>
     */
    fun fetchOneByTokenId(value: Long): jooq.generated.tables.pojos.Token? = fetchOne(Token.TOKEN.TOKEN_ID, value)

    /**
     * Fetch records that have <code>sale_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSaleId(lowerInclusive: Long, upperInclusive: Long): List<jooq.generated.tables.pojos.Token> = fetchRange(Token.TOKEN.SALE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sale_id IN (values)</code>
     */
    fun fetchBySaleId(vararg values: Long): List<jooq.generated.tables.pojos.Token> = fetch(Token.TOKEN.SALE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAmount(lowerInclusive: Double, upperInclusive: Double): List<jooq.generated.tables.pojos.Token> = fetchRange(Token.TOKEN.AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    fun fetchByAmount(vararg values: Double): List<jooq.generated.tables.pojos.Token> = fetch(Token.TOKEN.AMOUNT, *values.toTypedArray())

    /**
     * Fetch records that have <code>updated_on BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUpdatedOn(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<jooq.generated.tables.pojos.Token> = fetchRange(Token.TOKEN.UPDATED_ON, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_on IN (values)</code>
     */
    fun fetchByUpdatedOn(vararg values: LocalDateTime): List<jooq.generated.tables.pojos.Token> = fetch(Token.TOKEN.UPDATED_ON, *values)
}
