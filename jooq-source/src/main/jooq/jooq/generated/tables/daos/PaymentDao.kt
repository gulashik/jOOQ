/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import java.math.BigDecimal
import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.tables.Payment
import jooq.generated.tables.records.PaymentRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.Record2
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class PaymentDao(configuration: Configuration?) : DAOImpl<PaymentRecord, jooq.generated.tables.pojos.Payment, Record2<Long?, String?>>(Payment.PAYMENT, jooq.generated.tables.pojos.Payment::class.java, configuration) {

    /**
     * Create a new PaymentDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Payment): Record2<Long?, String?> = compositeKeyRecord(o.customerNumber, o.checkNumber)

    /**
     * Fetch records that have <code>customer_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCustomerNumber(lowerInclusive: Long, upperInclusive: Long): List<jooq.generated.tables.pojos.Payment> = fetchRange(Payment.PAYMENT.CUSTOMER_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_number IN (values)</code>
     */
    fun fetchByCustomerNumber(vararg values: Long): List<jooq.generated.tables.pojos.Payment> = fetch(Payment.PAYMENT.CUSTOMER_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>check_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCheckNumber(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Payment> = fetchRange(Payment.PAYMENT.CHECK_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>check_number IN (values)</code>
     */
    fun fetchByCheckNumber(vararg values: String): List<jooq.generated.tables.pojos.Payment> = fetch(Payment.PAYMENT.CHECK_NUMBER, *values)

    /**
     * Fetch a unique record that has <code>check_number = value</code>
     */
    fun fetchOneByCheckNumber(value: String): jooq.generated.tables.pojos.Payment? = fetchOne(Payment.PAYMENT.CHECK_NUMBER, value)

    /**
     * Fetch records that have <code>payment_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPaymentDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<jooq.generated.tables.pojos.Payment> = fetchRange(Payment.PAYMENT.PAYMENT_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>payment_date IN (values)</code>
     */
    fun fetchByPaymentDate(vararg values: LocalDateTime): List<jooq.generated.tables.pojos.Payment> = fetch(Payment.PAYMENT.PAYMENT_DATE, *values)

    /**
     * Fetch records that have <code>invoice_amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfInvoiceAmount(lowerInclusive: BigDecimal, upperInclusive: BigDecimal): List<jooq.generated.tables.pojos.Payment> = fetchRange(Payment.PAYMENT.INVOICE_AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>invoice_amount IN (values)</code>
     */
    fun fetchByInvoiceAmount(vararg values: BigDecimal): List<jooq.generated.tables.pojos.Payment> = fetch(Payment.PAYMENT.INVOICE_AMOUNT, *values)

    /**
     * Fetch records that have <code>caching_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCachingDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<jooq.generated.tables.pojos.Payment> = fetchRange(Payment.PAYMENT.CACHING_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>caching_date IN (values)</code>
     */
    fun fetchByCachingDate(vararg values: LocalDateTime): List<jooq.generated.tables.pojos.Payment> = fetch(Payment.PAYMENT.CACHING_DATE, *values)

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfVersion(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.generated.tables.pojos.Payment> = fetchRange(Payment.PAYMENT.VERSION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    fun fetchByVersion(vararg values: Int): List<jooq.generated.tables.pojos.Payment> = fetch(Payment.PAYMENT.VERSION, *values.toTypedArray())

    /**
     * Fetch records that have <code>modified BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfModified(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<jooq.generated.tables.pojos.Payment> = fetchRange(Payment.PAYMENT.MODIFIED, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>modified IN (values)</code>
     */
    fun fetchByModified(vararg values: LocalDateTime): List<jooq.generated.tables.pojos.Payment> = fetch(Payment.PAYMENT.MODIFIED, *values)
}
