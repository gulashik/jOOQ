/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import javax.annotation.processing.Generated

import jooq.generated.tables.Department
import jooq.generated.tables.records.DepartmentRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class DepartmentDao(configuration: Configuration?) : DAOImpl<DepartmentRecord, jooq.generated.tables.pojos.Department, Int>(Department.DEPARTMENT, jooq.generated.tables.pojos.Department::class.java, configuration) {

    /**
     * Create a new DepartmentDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Department): Int? = o.departmentId

    /**
     * Fetch records that have <code>department_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDepartmentId(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.DEPARTMENT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>department_id IN (values)</code>
     */
    fun fetchByDepartmentId(vararg values: Int): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.DEPARTMENT_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>department_id = value</code>
     */
    fun fetchOneByDepartmentId(value: Int): jooq.generated.tables.pojos.Department? = fetchOne(Department.DEPARTMENT.DEPARTMENT_ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.NAME, *values)

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPhone(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.PHONE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    fun fetchByPhone(vararg values: String): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.PHONE, *values)

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCode(lowerInclusive: Int, upperInclusive: Int): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    fun fetchByCode(vararg values: Int): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.CODE, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    fun fetchOneByCode(value: Int): jooq.generated.tables.pojos.Department? = fetchOne(Department.DEPARTMENT.CODE, value)

    /**
     * Fetch records that have <code>office_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOfficeCode(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.OFFICE_CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>office_code IN (values)</code>
     */
    fun fetchByOfficeCode(vararg values: String): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.OFFICE_CODE, *values)

    /**
     * Fetch records that have <code>topic BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTopic(lowerInclusive: Array<String?>?, upperInclusive: Array<String?>?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.TOPIC, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>topic IN (values)</code>
     */
    fun fetchByTopic(vararg values: Array<String?>): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.TOPIC, *values)
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun fetchRangeOfDepNetIpv4(lowerInclusive: Any?, upperInclusive: Any?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.DEP_NET_IPV4, lowerInclusive, upperInclusive)
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun fetchByDepNetIpv4(vararg values: Any): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.DEP_NET_IPV4, *values)

    /**
     * Fetch records that have <code>local_budget BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLocalBudget(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.LOCAL_BUDGET, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>local_budget IN (values)</code>
     */
    fun fetchByLocalBudget(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.LOCAL_BUDGET, *values.toTypedArray())

    /**
     * Fetch records that have <code>profit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProfit(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.PROFIT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>profit IN (values)</code>
     */
    fun fetchByProfit(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.PROFIT, *values.toTypedArray())

    /**
     * Fetch records that have <code>forecast_profit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfForecastProfit(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.FORECAST_PROFIT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>forecast_profit IN (values)</code>
     */
    fun fetchByForecastProfit(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.FORECAST_PROFIT, *values.toTypedArray())

    /**
     * Fetch records that have <code>cash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCash(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.CASH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>cash IN (values)</code>
     */
    fun fetchByCash(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.CASH, *values.toTypedArray())

    /**
     * Fetch records that have <code>accounts_receivable BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfAccountsReceivable(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.ACCOUNTS_RECEIVABLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>accounts_receivable IN (values)</code>
     */
    fun fetchByAccountsReceivable(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.ACCOUNTS_RECEIVABLE, *values.toTypedArray())

    /**
     * Fetch records that have <code>inventories BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfInventories(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.INVENTORIES, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inventories IN (values)</code>
     */
    fun fetchByInventories(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.INVENTORIES, *values.toTypedArray())

    /**
     * Fetch records that have <code>accounts_payable BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAccountsPayable(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.ACCOUNTS_PAYABLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>accounts_payable IN (values)</code>
     */
    fun fetchByAccountsPayable(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.ACCOUNTS_PAYABLE, *values.toTypedArray())

    /**
     * Fetch records that have <code>st_borrowing BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStBorrowing(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.ST_BORROWING, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>st_borrowing IN (values)</code>
     */
    fun fetchByStBorrowing(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.ST_BORROWING, *values.toTypedArray())

    /**
     * Fetch records that have <code>accrued_liabilities BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfAccruedLiabilities(lowerInclusive: Double?, upperInclusive: Double?): List<jooq.generated.tables.pojos.Department> = fetchRange(Department.DEPARTMENT.ACCRUED_LIABILITIES, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>accrued_liabilities IN (values)</code>
     */
    fun fetchByAccruedLiabilities(vararg values: Double): List<jooq.generated.tables.pojos.Department> = fetch(Department.DEPARTMENT.ACCRUED_LIABILITIES, *values.toTypedArray())
}
