/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables.daos


import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.tables.Customer
import jooq.generated.tables.records.CustomerRecord

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
@Repository
open class CustomerDao(configuration: Configuration?) : DAOImpl<CustomerRecord, jooq.generated.tables.pojos.Customer, Long>(Customer.CUSTOMER, jooq.generated.tables.pojos.Customer::class.java, configuration) {

    /**
     * Create a new CustomerDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: jooq.generated.tables.pojos.Customer): Long? = o.customerNumber

    /**
     * Fetch records that have <code>customer_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCustomerNumber(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.CUSTOMER_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_number IN (values)</code>
     */
    fun fetchByCustomerNumber(vararg values: Long): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.CUSTOMER_NUMBER, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>customer_number = value</code>
     */
    fun fetchOneByCustomerNumber(value: Long): jooq.generated.tables.pojos.Customer? = fetchOne(Customer.CUSTOMER.CUSTOMER_NUMBER, value)

    /**
     * Fetch records that have <code>customer_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCustomerName(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.CUSTOMER_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_name IN (values)</code>
     */
    fun fetchByCustomerName(vararg values: String): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.CUSTOMER_NAME, *values)

    /**
     * Fetch a unique record that has <code>customer_name = value</code>
     */
    fun fetchOneByCustomerName(value: String): jooq.generated.tables.pojos.Customer? = fetchOne(Customer.CUSTOMER.CUSTOMER_NAME, value)

    /**
     * Fetch records that have <code>contact_last_name BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfContactLastName(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.CONTACT_LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>contact_last_name IN (values)</code>
     */
    fun fetchByContactLastName(vararg values: String): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.CONTACT_LAST_NAME, *values)

    /**
     * Fetch records that have <code>contact_first_name BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfContactFirstName(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.CONTACT_FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>contact_first_name IN (values)</code>
     */
    fun fetchByContactFirstName(vararg values: String): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.CONTACT_FIRST_NAME, *values)

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPhone(lowerInclusive: String, upperInclusive: String): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.PHONE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    fun fetchByPhone(vararg values: String): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.PHONE, *values)

    /**
     * Fetch records that have <code>sales_rep_employee_number BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    fun fetchRangeOfSalesRepEmployeeNumber(lowerInclusive: Long?, upperInclusive: Long?): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.SALES_REP_EMPLOYEE_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>sales_rep_employee_number IN
     * (values)</code>
     */
    fun fetchBySalesRepEmployeeNumber(vararg values: Long): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.SALES_REP_EMPLOYEE_NUMBER, *values.toTypedArray())

    /**
     * Fetch records that have <code>credit_limit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreditLimit(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.CREDIT_LIMIT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>credit_limit IN (values)</code>
     */
    fun fetchByCreditLimit(vararg values: BigDecimal): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.CREDIT_LIMIT, *values)

    /**
     * Fetch records that have <code>first_buy_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstBuyDate(lowerInclusive: Int?, upperInclusive: Int?): List<jooq.generated.tables.pojos.Customer> = fetchRange(Customer.CUSTOMER.FIRST_BUY_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_buy_date IN (values)</code>
     */
    fun fetchByFirstBuyDate(vararg values: Int): List<jooq.generated.tables.pojos.Customer> = fetch(Customer.CUSTOMER.FIRST_BUY_DATE, *values.toTypedArray())
}
