/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import java.math.BigDecimal
import java.time.LocalDateTime

import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.BankTransactionRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BankTransaction(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BankTransactionRecord>?,
    aliased: Table<BankTransactionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BankTransactionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.bank_transaction</code>
         */
        val BANK_TRANSACTION: BankTransaction = BankTransaction()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BankTransactionRecord> = BankTransactionRecord::class.java

    /**
     * The column <code>public.bank_transaction.transaction_id</code>.
     */
    val TRANSACTION_ID: TableField<BankTransactionRecord, Int?> = createField(DSL.name("transaction_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.bank_transaction.bank_name</code>.
     */
    val BANK_NAME: TableField<BankTransactionRecord, String?> = createField(DSL.name("bank_name"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.bank_transaction.bank_iban</code>.
     */
    val BANK_IBAN: TableField<BankTransactionRecord, String?> = createField(DSL.name("bank_iban"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.bank_transaction.transfer_amount</code>.
     */
    val TRANSFER_AMOUNT: TableField<BankTransactionRecord, BigDecimal?> = createField(DSL.name("transfer_amount"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    /**
     * The column <code>public.bank_transaction.caching_date</code>.
     */
    val CACHING_DATE: TableField<BankTransactionRecord, LocalDateTime?> = createField(DSL.name("caching_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.bank_transaction.customer_number</code>.
     */
    val CUSTOMER_NUMBER: TableField<BankTransactionRecord, Long?> = createField(DSL.name("customer_number"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.bank_transaction.check_number</code>.
     */
    val CHECK_NUMBER: TableField<BankTransactionRecord, String?> = createField(DSL.name("check_number"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.bank_transaction.card_type</code>.
     */
    val CARD_TYPE: TableField<BankTransactionRecord, String?> = createField(DSL.name("card_type"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.bank_transaction.status</code>.
     */
    val STATUS: TableField<BankTransactionRecord, String?> = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.field(DSL.raw("'SUCCESS'::character varying"), SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<BankTransactionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BankTransactionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.bank_transaction</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.bank_transaction</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.bank_transaction</code> table reference
     */
    constructor(): this(DSL.name("bank_transaction"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<BankTransactionRecord, Int?> = super.getIdentity() as Identity<BankTransactionRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<BankTransactionRecord> = Internal.createUniqueKey(BankTransaction.BANK_TRANSACTION, DSL.name("bank_transaction_pk"), arrayOf(BankTransaction.BANK_TRANSACTION.TRANSACTION_ID), true)
    override fun `as`(alias: String): BankTransaction = BankTransaction(DSL.name(alias), this)
    override fun `as`(alias: Name): BankTransaction = BankTransaction(alias, this)
    override fun `as`(alias: Table<*>): BankTransaction = BankTransaction(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BankTransaction = BankTransaction(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BankTransaction = BankTransaction(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BankTransaction = BankTransaction(name.getQualifiedName(), null)
}
