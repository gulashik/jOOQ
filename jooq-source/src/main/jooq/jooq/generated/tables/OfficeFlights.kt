/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.OfficeFlightsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class OfficeFlights(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OfficeFlightsRecord>?,
    aliased: Table<OfficeFlightsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OfficeFlightsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.office_flights</code>
         */
        val OFFICE_FLIGHTS: OfficeFlights = OfficeFlights()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OfficeFlightsRecord> = OfficeFlightsRecord::class.java

    /**
     * The column <code>public.office_flights.depart_town</code>.
     */
    val DEPART_TOWN: TableField<OfficeFlightsRecord, String?> = createField(DSL.name("depart_town"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>public.office_flights.arrival_town</code>.
     */
    val ARRIVAL_TOWN: TableField<OfficeFlightsRecord, String?> = createField(DSL.name("arrival_town"), SQLDataType.VARCHAR(32).nullable(false), this, "")

    /**
     * The column <code>public.office_flights.distance_km</code>.
     */
    val DISTANCE_KM: TableField<OfficeFlightsRecord, Int?> = createField(DSL.name("distance_km"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OfficeFlightsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OfficeFlightsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.office_flights</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.office_flights</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.office_flights</code> table reference
     */
    constructor(): this(DSL.name("office_flights"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<OfficeFlightsRecord> = Internal.createUniqueKey(OfficeFlights.OFFICE_FLIGHTS, DSL.name("office_flights_pk"), arrayOf(OfficeFlights.OFFICE_FLIGHTS.DEPART_TOWN, OfficeFlights.OFFICE_FLIGHTS.ARRIVAL_TOWN), true)
    override fun `as`(alias: String): OfficeFlights = OfficeFlights(DSL.name(alias), this)
    override fun `as`(alias: Name): OfficeFlights = OfficeFlights(alias, this)
    override fun `as`(alias: Table<*>): OfficeFlights = OfficeFlights(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OfficeFlights = OfficeFlights(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OfficeFlights = OfficeFlights(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OfficeFlights = OfficeFlights(name.getQualifiedName(), null)
}
