/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.BookToBookStoreRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class BookToBookStore(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, BookToBookStoreRecord>?,
    aliased: Table<BookToBookStoreRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<BookToBookStoreRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.book_to_book_store</code>
         */
        val BOOK_TO_BOOK_STORE: BookToBookStore = BookToBookStore()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<BookToBookStoreRecord> = BookToBookStoreRecord::class.java

    /**
     * The column <code>public.book_to_book_store.name</code>.
     */
    val NAME: TableField<BookToBookStoreRecord, String?> = createField(DSL.name("name"), SQLDataType.CHAR(400).nullable(false), this, "")

    /**
     * The column <code>public.book_to_book_store.book_id</code>.
     */
    val BOOK_ID: TableField<BookToBookStoreRecord, Int?> = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.book_to_book_store.stock</code>.
     */
    val STOCK: TableField<BookToBookStoreRecord, Int?> = createField(DSL.name("stock"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<BookToBookStoreRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<BookToBookStoreRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.book_to_book_store</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.book_to_book_store</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.book_to_book_store</code> table reference
     */
    constructor(): this(DSL.name("book_to_book_store"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<BookToBookStoreRecord> = Internal.createUniqueKey(BookToBookStore.BOOK_TO_BOOK_STORE, DSL.name("book_to_book_store_pkey"), arrayOf(BookToBookStore.BOOK_TO_BOOK_STORE.NAME, BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID), true)
    override fun `as`(alias: String): BookToBookStore = BookToBookStore(DSL.name(alias), this)
    override fun `as`(alias: Name): BookToBookStore = BookToBookStore(alias, this)
    override fun `as`(alias: Table<*>): BookToBookStore = BookToBookStore(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): BookToBookStore = BookToBookStore(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): BookToBookStore = BookToBookStore(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): BookToBookStore = BookToBookStore(name.getQualifiedName(), null)
}
