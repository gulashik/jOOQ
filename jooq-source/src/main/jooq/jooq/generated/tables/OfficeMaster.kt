/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.OfficeMasterRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class OfficeMaster(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OfficeMasterRecord>?,
    aliased: Table<OfficeMasterRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OfficeMasterRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "office_master" as  SELECT office_code,
      city,
      country,
      state,
      phone,
      postal_code
     FROM office
    WHERE (city IS NOT NULL);
    """)
) {
    companion object {

        /**
         * The reference instance of <code>public.office_master</code>
         */
        val OFFICE_MASTER: OfficeMaster = OfficeMaster()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OfficeMasterRecord> = OfficeMasterRecord::class.java

    /**
     * The column <code>public.office_master.office_code</code>.
     */
    val OFFICE_CODE: TableField<OfficeMasterRecord, String?> = createField(DSL.name("office_code"), SQLDataType.VARCHAR(10), this, "")

    /**
     * The column <code>public.office_master.city</code>.
     */
    val CITY: TableField<OfficeMasterRecord, String?> = createField(DSL.name("city"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.office_master.country</code>.
     */
    val COUNTRY: TableField<OfficeMasterRecord, String?> = createField(DSL.name("country"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.office_master.state</code>.
     */
    val STATE: TableField<OfficeMasterRecord, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.office_master.phone</code>.
     */
    val PHONE: TableField<OfficeMasterRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.office_master.postal_code</code>.
     */
    val POSTAL_CODE: TableField<OfficeMasterRecord, String?> = createField(DSL.name("postal_code"), jooq.generated.domains.POSTAL_CODE.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<OfficeMasterRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OfficeMasterRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.office_master</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.office_master</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.office_master</code> table reference
     */
    constructor(): this(DSL.name("office_master"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): OfficeMaster = OfficeMaster(DSL.name(alias), this)
    override fun `as`(alias: Name): OfficeMaster = OfficeMaster(alias, this)
    override fun `as`(alias: Table<*>): OfficeMaster = OfficeMaster(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OfficeMaster = OfficeMaster(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OfficeMaster = OfficeMaster(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OfficeMaster = OfficeMaster(name.getQualifiedName(), null)
}
