/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.OfficeRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Office(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OfficeRecord>?,
    aliased: Table<OfficeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OfficeRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.office</code>
         */
        val OFFICE: Office = Office()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OfficeRecord> = OfficeRecord::class.java

    /**
     * The column <code>public.office.office_code</code>.
     */
    val OFFICE_CODE: TableField<OfficeRecord, String?> = createField(DSL.name("office_code"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>public.office.city</code>.
     */
    val CITY: TableField<OfficeRecord, String?> = createField(DSL.name("city"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.office.phone</code>.
     */
    val PHONE: TableField<OfficeRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.office.address_line_first</code>.
     */
    val ADDRESS_LINE_FIRST: TableField<OfficeRecord, String?> = createField(DSL.name("address_line_first"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.office.address_line_second</code>.
     */
    val ADDRESS_LINE_SECOND: TableField<OfficeRecord, String?> = createField(DSL.name("address_line_second"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.office.state</code>.
     */
    val STATE: TableField<OfficeRecord, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.office.country</code>.
     */
    val COUNTRY: TableField<OfficeRecord, String?> = createField(DSL.name("country"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>public.office.postal_code</code>.
     */
    val POSTAL_CODE: TableField<OfficeRecord, String?> = createField(DSL.name("postal_code"), jooq.generated.domains.POSTAL_CODE.getDataType().nullable(false), this, "")

    /**
     * The column <code>public.office.territory</code>.
     */
    val TERRITORY: TableField<OfficeRecord, String?> = createField(DSL.name("territory"), SQLDataType.VARCHAR(10).nullable(false), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val LOCATION: TableField<OfficeRecord, Any?> = createField(DSL.name("location"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"point\""), this, "")

    /**
     * The column <code>public.office.internal_budget</code>.
     */
    val INTERNAL_BUDGET: TableField<OfficeRecord, Int?> = createField(DSL.name("internal_budget"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OfficeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OfficeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.office</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.office</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.office</code> table reference
     */
    constructor(): this(DSL.name("office"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<OfficeRecord> = Internal.createUniqueKey(Office.OFFICE, DSL.name("office_pk"), arrayOf(Office.OFFICE.OFFICE_CODE), true)
    override fun getUniqueKeys(): List<UniqueKey<OfficeRecord>> = listOf(
        Internal.createUniqueKey(Office.OFFICE, DSL.name("office_postal_code_uk"), arrayOf(Office.OFFICE.POSTAL_CODE), true)
    )
    override fun `as`(alias: String): Office = Office(DSL.name(alias), this)
    override fun `as`(alias: Name): Office = Office(alias, this)
    override fun `as`(alias: Table<*>): Office = Office(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Office = Office(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Office = Office(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Office = Office(name.getQualifiedName(), null)
}
