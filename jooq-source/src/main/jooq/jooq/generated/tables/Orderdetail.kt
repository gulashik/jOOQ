/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import java.math.BigDecimal

import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.OrderdetailRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Orderdetail(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, OrderdetailRecord>?,
    aliased: Table<OrderdetailRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<OrderdetailRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.orderdetail</code>
         */
        val ORDERDETAIL: Orderdetail = Orderdetail()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrderdetailRecord> = OrderdetailRecord::class.java

    /**
     * The column <code>public.orderdetail.orderdetail_id</code>.
     */
    val ORDERDETAIL_ID: TableField<OrderdetailRecord, Int?> = createField(DSL.name("orderdetail_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.orderdetail.order_id</code>.
     */
    val ORDER_ID: TableField<OrderdetailRecord, Long?> = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.orderdetail.product_id</code>.
     */
    val PRODUCT_ID: TableField<OrderdetailRecord, Long?> = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.orderdetail.quantity_ordered</code>.
     */
    val QUANTITY_ORDERED: TableField<OrderdetailRecord, Int?> = createField(DSL.name("quantity_ordered"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.orderdetail.price_each</code>.
     */
    val PRICE_EACH: TableField<OrderdetailRecord, BigDecimal?> = createField(DSL.name("price_each"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "")

    /**
     * The column <code>public.orderdetail.order_line_number</code>.
     */
    val ORDER_LINE_NUMBER: TableField<OrderdetailRecord, Int?> = createField(DSL.name("order_line_number"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrderdetailRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<OrderdetailRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.orderdetail</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.orderdetail</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.orderdetail</code> table reference
     */
    constructor(): this(DSL.name("orderdetail"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<OrderdetailRecord, Int?> = super.getIdentity() as Identity<OrderdetailRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<OrderdetailRecord> = Internal.createUniqueKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetail_pk"), arrayOf(Orderdetail.ORDERDETAIL.ORDERDETAIL_ID), true)
    override fun getUniqueKeys(): List<UniqueKey<OrderdetailRecord>> = listOf(
        Internal.createUniqueKey(Orderdetail.ORDERDETAIL, DSL.name("orderdetail_uk"), arrayOf(Orderdetail.ORDERDETAIL.ORDER_ID, Orderdetail.ORDERDETAIL.PRODUCT_ID), true)
    )
    override fun `as`(alias: String): Orderdetail = Orderdetail(DSL.name(alias), this)
    override fun `as`(alias: Name): Orderdetail = Orderdetail(alias, this)
    override fun `as`(alias: Table<*>): Orderdetail = Orderdetail(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Orderdetail = Orderdetail(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Orderdetail = Orderdetail(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Orderdetail = Orderdetail(name.getQualifiedName(), null)
}
