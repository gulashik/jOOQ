/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables


import javax.annotation.processing.Generated

import jooq.generated.Public
import jooq.generated.tables.records.ProductMasterRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.14",
        "schema version:1.2"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class ProductMaster(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProductMasterRecord>?,
    aliased: Table<ProductMasterRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProductMasterRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("""
    create view "product_master" as  SELECT product_line,
     product_name,
     product_scale
    FROM product;
    """)
) {
    companion object {

        /**
         * The reference instance of <code>public.product_master</code>
         */
        val PRODUCT_MASTER: ProductMaster = ProductMaster()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProductMasterRecord> = ProductMasterRecord::class.java

    /**
     * The column <code>public.product_master.product_line</code>.
     */
    val PRODUCT_LINE: TableField<ProductMasterRecord, String?> = createField(DSL.name("product_line"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.product_master.product_name</code>.
     */
    val PRODUCT_NAME: TableField<ProductMasterRecord, String?> = createField(DSL.name("product_name"), SQLDataType.VARCHAR(70), this, "")

    /**
     * The column <code>public.product_master.product_scale</code>.
     */
    val PRODUCT_SCALE: TableField<ProductMasterRecord, String?> = createField(DSL.name("product_scale"), SQLDataType.VARCHAR(10), this, "")

    private constructor(alias: Name, aliased: Table<ProductMasterRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProductMasterRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.product_master</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.product_master</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.product_master</code> table reference
     */
    constructor(): this(DSL.name("product_master"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): ProductMaster = ProductMaster(DSL.name(alias), this)
    override fun `as`(alias: Name): ProductMaster = ProductMaster(alias, this)
    override fun `as`(alias: Table<*>): ProductMaster = ProductMaster(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ProductMaster = ProductMaster(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ProductMaster = ProductMaster(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ProductMaster = ProductMaster(name.getQualifiedName(), null)
}
